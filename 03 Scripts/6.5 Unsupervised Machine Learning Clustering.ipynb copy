{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "084ffb05",
   "metadata": {},
   "source": [
    "### Importing Libraries and Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2f5526f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import sklearn\n",
    "from sklearn.cluster import KMeans # Here is where you import the k-means algorithm from scikit-learn.\n",
    "import pylab as pl # PyLab is a convenience module that bulk imports matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33cd46f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This option ensures the graphs you create are displayed in your notebook without the need to \"call\" them specifically.\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94f52688",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = r'/Users/nataliawijaya/Documents/Bootcamp/New York Citi Bikes/02 Data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "749774d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(os.path.join(path, 'Prepared Data', 'citibike_cleaned_exc2930_1.csv'), index_col = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "35b4b98c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>...</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>16013</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:18:55</td>\n",
       "      <td>523</td>\n",
       "      <td>W 38 St &amp; 8 Ave</td>\n",
       "      <td>40.754666</td>\n",
       "      <td>-73.991382</td>\n",
       "      <td>2013-09-09 18:35:28</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>15230</td>\n",
       "      <td>Thu</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-12 18:38:53</td>\n",
       "      <td>257</td>\n",
       "      <td>Lispenard St &amp; Broadway</td>\n",
       "      <td>40.719392</td>\n",
       "      <td>-74.002472</td>\n",
       "      <td>2013-09-12 18:48:34</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>17942</td>\n",
       "      <td>Wed</td>\n",
       "      <td>19</td>\n",
       "      <td>2013-09-18 19:44:04</td>\n",
       "      <td>479</td>\n",
       "      <td>9 Ave &amp; W 45 St</td>\n",
       "      <td>40.760193</td>\n",
       "      <td>-73.991255</td>\n",
       "      <td>2013-09-18 19:50:05</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>13.2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>19683</td>\n",
       "      <td>Sat</td>\n",
       "      <td>11</td>\n",
       "      <td>2013-09-28 11:54:37</td>\n",
       "      <td>527</td>\n",
       "      <td>E 33 St &amp; 1 Ave</td>\n",
       "      <td>40.743156</td>\n",
       "      <td>-73.974347</td>\n",
       "      <td>2013-09-28 12:03:58</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>28</td>\n",
       "      <td>12</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>18024</td>\n",
       "      <td>Sat</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-07 18:08:22</td>\n",
       "      <td>521</td>\n",
       "      <td>8 Ave &amp; W 31 St</td>\n",
       "      <td>40.750450</td>\n",
       "      <td>-73.994811</td>\n",
       "      <td>2013-09-07 18:46:38</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46668</th>\n",
       "      <td>46668</td>\n",
       "      <td>17988</td>\n",
       "      <td>Sat</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-21 18:39:20</td>\n",
       "      <td>479</td>\n",
       "      <td>9 Ave &amp; W 45 St</td>\n",
       "      <td>40.760193</td>\n",
       "      <td>-73.991255</td>\n",
       "      <td>2013-09-21 20:08:59</td>\n",
       "      <td>...</td>\n",
       "      <td>21</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46669</th>\n",
       "      <td>46669</td>\n",
       "      <td>18458</td>\n",
       "      <td>Sat</td>\n",
       "      <td>17</td>\n",
       "      <td>2013-09-14 17:32:26</td>\n",
       "      <td>261</td>\n",
       "      <td>Johnson St &amp; Gold St</td>\n",
       "      <td>40.694749</td>\n",
       "      <td>-73.983625</td>\n",
       "      <td>2013-09-14 17:52:17</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46670</th>\n",
       "      <td>46670</td>\n",
       "      <td>15054</td>\n",
       "      <td>Sat</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-07 18:08:21</td>\n",
       "      <td>402</td>\n",
       "      <td>Broadway &amp; E 22 St</td>\n",
       "      <td>40.740343</td>\n",
       "      <td>-73.989551</td>\n",
       "      <td>2013-09-07 18:25:51</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46671</th>\n",
       "      <td>46671</td>\n",
       "      <td>16763</td>\n",
       "      <td>Sat</td>\n",
       "      <td>13</td>\n",
       "      <td>2013-09-07 13:25:35</td>\n",
       "      <td>271</td>\n",
       "      <td>Ashland Pl &amp; Hanson Pl</td>\n",
       "      <td>40.685282</td>\n",
       "      <td>-73.978058</td>\n",
       "      <td>2013-09-07 14:14:04</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>13.7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46672</th>\n",
       "      <td>46672</td>\n",
       "      <td>16794</td>\n",
       "      <td>Mon</td>\n",
       "      <td>21</td>\n",
       "      <td>2013-09-23 21:54:36</td>\n",
       "      <td>515</td>\n",
       "      <td>W 43 St &amp; 10 Ave</td>\n",
       "      <td>40.760094</td>\n",
       "      <td>-73.994618</td>\n",
       "      <td>2013-09-23 22:00:46</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>12.9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>46673 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0  bike_id weekday  start_hour           start_time  \\\n",
       "0               0    16013     Mon          18  2013-09-09 18:18:55   \n",
       "1               1    15230     Thu          18  2013-09-12 18:38:53   \n",
       "2               2    17942     Wed          19  2013-09-18 19:44:04   \n",
       "3               3    19683     Sat          11  2013-09-28 11:54:37   \n",
       "4               4    18024     Sat          18  2013-09-07 18:08:22   \n",
       "...           ...      ...     ...         ...                  ...   \n",
       "46668       46668    17988     Sat          18  2013-09-21 18:39:20   \n",
       "46669       46669    18458     Sat          17  2013-09-14 17:32:26   \n",
       "46670       46670    15054     Sat          18  2013-09-07 18:08:21   \n",
       "46671       46671    16763     Sat          13  2013-09-07 13:25:35   \n",
       "46672       46672    16794     Mon          21  2013-09-23 21:54:36   \n",
       "\n",
       "       start_station_id       start_station_name  start_station_latitude  \\\n",
       "0                   523          W 38 St & 8 Ave               40.754666   \n",
       "1                   257  Lispenard St & Broadway               40.719392   \n",
       "2                   479          9 Ave & W 45 St               40.760193   \n",
       "3                   527          E 33 St & 1 Ave               40.743156   \n",
       "4                   521          8 Ave & W 31 St               40.750450   \n",
       "...                 ...                      ...                     ...   \n",
       "46668               479          9 Ave & W 45 St               40.760193   \n",
       "46669               261     Johnson St & Gold St               40.694749   \n",
       "46670               402       Broadway & E 22 St               40.740343   \n",
       "46671               271   Ashland Pl & Hanson Pl               40.685282   \n",
       "46672               515         W 43 St & 10 Ave               40.760094   \n",
       "\n",
       "       start_station_longitude             end_time  ...  start_day end_year  \\\n",
       "0                   -73.991382  2013-09-09 18:35:28  ...          9     2013   \n",
       "1                   -74.002472  2013-09-12 18:48:34  ...         12     2013   \n",
       "2                   -73.991255  2013-09-18 19:50:05  ...         18     2013   \n",
       "3                   -73.974347  2013-09-28 12:03:58  ...         28     2013   \n",
       "4                   -73.994811  2013-09-07 18:46:38  ...          7     2013   \n",
       "...                        ...                  ...  ...        ...      ...   \n",
       "46668               -73.991255  2013-09-21 20:08:59  ...         21     2013   \n",
       "46669               -73.983625  2013-09-14 17:52:17  ...         14     2013   \n",
       "46670               -73.989551  2013-09-07 18:25:51  ...          7     2013   \n",
       "46671               -73.978058  2013-09-07 14:14:04  ...          7     2013   \n",
       "46672               -73.994618  2013-09-23 22:00:46  ...         23     2013   \n",
       "\n",
       "       end_month  end_week  end_day end_hour  days_category    peak_hours  \\\n",
       "0              9        37        9       18       Weekdays    Peak hours   \n",
       "1              9        37       12       18       Weekdays    Peak hours   \n",
       "2              9        38       18       19       Weekdays    Peak hours   \n",
       "3              9        39       28       12        Weekend  Normal hours   \n",
       "4              9        36        7       18        Weekend    Peak hours   \n",
       "...          ...       ...      ...      ...            ...           ...   \n",
       "46668          9        38       21       20        Weekend    Peak hours   \n",
       "46669          9        37       14       17        Weekend    Peak hours   \n",
       "46670          9        36        7       18        Weekend    Peak hours   \n",
       "46671          9        36        7       14        Weekend  Normal hours   \n",
       "46672          9        39       23       22       Weekdays  Normal hours   \n",
       "\n",
       "      avg_trip_duration_each_hour  day_of_week  \n",
       "0                            14.1            2  \n",
       "1                            14.1            5  \n",
       "2                            13.2            4  \n",
       "3                            14.0            7  \n",
       "4                            14.1            7  \n",
       "...                           ...          ...  \n",
       "46668                        14.1            7  \n",
       "46669                        14.0            7  \n",
       "46670                        14.1            7  \n",
       "46671                        13.7            7  \n",
       "46672                        12.9            2  \n",
       "\n",
       "[46673 rows x 33 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a0a2675d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(columns = ['Unnamed: 0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "511ca1c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>...</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16013</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:18:55</td>\n",
       "      <td>523</td>\n",
       "      <td>W 38 St &amp; 8 Ave</td>\n",
       "      <td>40.754666</td>\n",
       "      <td>-73.991382</td>\n",
       "      <td>2013-09-09 18:35:28</td>\n",
       "      <td>334</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15230</td>\n",
       "      <td>Thu</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-12 18:38:53</td>\n",
       "      <td>257</td>\n",
       "      <td>Lispenard St &amp; Broadway</td>\n",
       "      <td>40.719392</td>\n",
       "      <td>-74.002472</td>\n",
       "      <td>2013-09-12 18:48:34</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17942</td>\n",
       "      <td>Wed</td>\n",
       "      <td>19</td>\n",
       "      <td>2013-09-18 19:44:04</td>\n",
       "      <td>479</td>\n",
       "      <td>9 Ave &amp; W 45 St</td>\n",
       "      <td>40.760193</td>\n",
       "      <td>-73.991255</td>\n",
       "      <td>2013-09-18 19:50:05</td>\n",
       "      <td>513</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>13.2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19683</td>\n",
       "      <td>Sat</td>\n",
       "      <td>11</td>\n",
       "      <td>2013-09-28 11:54:37</td>\n",
       "      <td>527</td>\n",
       "      <td>E 33 St &amp; 1 Ave</td>\n",
       "      <td>40.743156</td>\n",
       "      <td>-73.974347</td>\n",
       "      <td>2013-09-28 12:03:58</td>\n",
       "      <td>441</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>28</td>\n",
       "      <td>12</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18024</td>\n",
       "      <td>Sat</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-07 18:08:22</td>\n",
       "      <td>521</td>\n",
       "      <td>8 Ave &amp; W 31 St</td>\n",
       "      <td>40.750450</td>\n",
       "      <td>-73.994811</td>\n",
       "      <td>2013-09-07 18:46:38</td>\n",
       "      <td>476</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   bike_id weekday  start_hour           start_time  start_station_id  \\\n",
       "0    16013     Mon          18  2013-09-09 18:18:55               523   \n",
       "1    15230     Thu          18  2013-09-12 18:38:53               257   \n",
       "2    17942     Wed          19  2013-09-18 19:44:04               479   \n",
       "3    19683     Sat          11  2013-09-28 11:54:37               527   \n",
       "4    18024     Sat          18  2013-09-07 18:08:22               521   \n",
       "\n",
       "        start_station_name  start_station_latitude  start_station_longitude  \\\n",
       "0          W 38 St & 8 Ave               40.754666               -73.991382   \n",
       "1  Lispenard St & Broadway               40.719392               -74.002472   \n",
       "2          9 Ave & W 45 St               40.760193               -73.991255   \n",
       "3          E 33 St & 1 Ave               40.743156               -73.974347   \n",
       "4          8 Ave & W 31 St               40.750450               -73.994811   \n",
       "\n",
       "              end_time  end_station_id  ... start_day  end_year  end_month  \\\n",
       "0  2013-09-09 18:35:28             334  ...         9      2013          9   \n",
       "1  2013-09-12 18:48:34             236  ...        12      2013          9   \n",
       "2  2013-09-18 19:50:05             513  ...        18      2013          9   \n",
       "3  2013-09-28 12:03:58             441  ...        28      2013          9   \n",
       "4  2013-09-07 18:46:38             476  ...         7      2013          9   \n",
       "\n",
       "   end_week end_day  end_hour  days_category    peak_hours  \\\n",
       "0        37       9        18       Weekdays    Peak hours   \n",
       "1        37      12        18       Weekdays    Peak hours   \n",
       "2        38      18        19       Weekdays    Peak hours   \n",
       "3        39      28        12        Weekend  Normal hours   \n",
       "4        36       7        18        Weekend    Peak hours   \n",
       "\n",
       "   avg_trip_duration_each_hour  day_of_week  \n",
       "0                         14.1            2  \n",
       "1                         14.1            5  \n",
       "2                         13.2            4  \n",
       "3                         14.0            7  \n",
       "4                         14.1            7  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "966a6336",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(46673, 32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7797f372",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 46673 entries, 0 to 46672\n",
      "Data columns (total 32 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   bike_id                      46673 non-null  int64  \n",
      " 1   weekday                      46673 non-null  object \n",
      " 2   start_hour                   46673 non-null  int64  \n",
      " 3   start_time                   46673 non-null  object \n",
      " 4   start_station_id             46673 non-null  int64  \n",
      " 5   start_station_name           46673 non-null  object \n",
      " 6   start_station_latitude       46673 non-null  float64\n",
      " 7   start_station_longitude      46673 non-null  float64\n",
      " 8   end_time                     46673 non-null  object \n",
      " 9   end_station_id               46673 non-null  int64  \n",
      " 10  end_station_name             46673 non-null  object \n",
      " 11  end_station_latitude         46673 non-null  float64\n",
      " 12  end_station_longitude        46673 non-null  float64\n",
      " 13  trip_duration                46673 non-null  int64  \n",
      " 14  subscriber                   46673 non-null  object \n",
      " 15  birth_year                   40191 non-null  float64\n",
      " 16  gender                       46673 non-null  int64  \n",
      " 17  gender_category              46673 non-null  object \n",
      " 18  trip_duration_min            46673 non-null  int64  \n",
      " 19  start_year                   46673 non-null  int64  \n",
      " 20  start_month                  46673 non-null  int64  \n",
      " 21  start_week                   46673 non-null  int64  \n",
      " 22  start_day                    46673 non-null  int64  \n",
      " 23  end_year                     46673 non-null  int64  \n",
      " 24  end_month                    46673 non-null  int64  \n",
      " 25  end_week                     46673 non-null  int64  \n",
      " 26  end_day                      46673 non-null  int64  \n",
      " 27  end_hour                     46673 non-null  int64  \n",
      " 28  days_category                46673 non-null  object \n",
      " 29  peak_hours                   46673 non-null  object \n",
      " 30  avg_trip_duration_each_hour  46673 non-null  float64\n",
      " 31  day_of_week                  46673 non-null  int64  \n",
      "dtypes: float64(6), int64(17), object(9)\n",
      "memory usage: 11.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9eb917d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>trip_duration</th>\n",
       "      <th>birth_year</th>\n",
       "      <th>...</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_week</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>40191.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>46673.0</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.0</td>\n",
       "      <td>46673.0</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "      <td>46673.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>17611.710454</td>\n",
       "      <td>14.152722</td>\n",
       "      <td>442.692049</td>\n",
       "      <td>40.734262</td>\n",
       "      <td>-73.991118</td>\n",
       "      <td>442.403252</td>\n",
       "      <td>40.733940</td>\n",
       "      <td>-73.991364</td>\n",
       "      <td>838.269449</td>\n",
       "      <td>1975.608470</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>37.436719</td>\n",
       "      <td>15.029010</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>37.437041</td>\n",
       "      <td>15.032867</td>\n",
       "      <td>14.313757</td>\n",
       "      <td>13.466152</td>\n",
       "      <td>4.100893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1674.680560</td>\n",
       "      <td>4.868148</td>\n",
       "      <td>355.257605</td>\n",
       "      <td>0.019883</td>\n",
       "      <td>0.012549</td>\n",
       "      <td>355.227714</td>\n",
       "      <td>0.019858</td>\n",
       "      <td>0.012552</td>\n",
       "      <td>572.795827</td>\n",
       "      <td>11.085518</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.152806</td>\n",
       "      <td>7.931816</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.152415</td>\n",
       "      <td>7.931520</td>\n",
       "      <td>4.918672</td>\n",
       "      <td>0.920047</td>\n",
       "      <td>1.948041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>14556.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>40.680342</td>\n",
       "      <td>-74.017134</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>40.680342</td>\n",
       "      <td>-74.017134</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>1899.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>16188.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>304.000000</td>\n",
       "      <td>40.720434</td>\n",
       "      <td>-74.000271</td>\n",
       "      <td>304.000000</td>\n",
       "      <td>40.720196</td>\n",
       "      <td>-74.001547</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>1968.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>12.900000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>17579.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>402.000000</td>\n",
       "      <td>40.736197</td>\n",
       "      <td>-73.990765</td>\n",
       "      <td>402.000000</td>\n",
       "      <td>40.735354</td>\n",
       "      <td>-73.991218</td>\n",
       "      <td>672.000000</td>\n",
       "      <td>1978.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>13.500000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>19014.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>484.000000</td>\n",
       "      <td>40.750073</td>\n",
       "      <td>-73.981923</td>\n",
       "      <td>483.000000</td>\n",
       "      <td>40.749156</td>\n",
       "      <td>-73.982050</td>\n",
       "      <td>1110.000000</td>\n",
       "      <td>1984.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>14.100000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20642.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>3002.000000</td>\n",
       "      <td>40.770513</td>\n",
       "      <td>-73.950048</td>\n",
       "      <td>3002.000000</td>\n",
       "      <td>40.770513</td>\n",
       "      <td>-73.950048</td>\n",
       "      <td>2697.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>14.700000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            bike_id    start_hour  start_station_id  start_station_latitude  \\\n",
       "count  46673.000000  46673.000000      46673.000000            46673.000000   \n",
       "mean   17611.710454     14.152722        442.692049               40.734262   \n",
       "std     1674.680560      4.868148        355.257605                0.019883   \n",
       "min    14556.000000      0.000000         72.000000               40.680342   \n",
       "25%    16188.000000     10.000000        304.000000               40.720434   \n",
       "50%    17579.000000     15.000000        402.000000               40.736197   \n",
       "75%    19014.000000     18.000000        484.000000               40.750073   \n",
       "max    20642.000000     23.000000       3002.000000               40.770513   \n",
       "\n",
       "       start_station_longitude  end_station_id  end_station_latitude  \\\n",
       "count             46673.000000    46673.000000          46673.000000   \n",
       "mean                -73.991118      442.403252             40.733940   \n",
       "std                   0.012549      355.227714              0.019858   \n",
       "min                 -74.017134       72.000000             40.680342   \n",
       "25%                 -74.000271      304.000000             40.720196   \n",
       "50%                 -73.990765      402.000000             40.735354   \n",
       "75%                 -73.981923      483.000000             40.749156   \n",
       "max                 -73.950048     3002.000000             40.770513   \n",
       "\n",
       "       end_station_longitude  trip_duration    birth_year  ...  start_month  \\\n",
       "count           46673.000000   46673.000000  40191.000000  ...      46673.0   \n",
       "mean              -73.991364     838.269449   1975.608470  ...          9.0   \n",
       "std                 0.012552     572.795827     11.085518  ...          0.0   \n",
       "min               -74.017134      60.000000   1899.000000  ...          9.0   \n",
       "25%               -74.001547     418.000000   1968.000000  ...          9.0   \n",
       "50%               -73.991218     672.000000   1978.000000  ...          9.0   \n",
       "75%               -73.982050    1110.000000   1984.000000  ...          9.0   \n",
       "max               -73.950048    2697.000000   1997.000000  ...          9.0   \n",
       "\n",
       "         start_week     start_day  end_year  end_month      end_week  \\\n",
       "count  46673.000000  46673.000000   46673.0    46673.0  46673.000000   \n",
       "mean      37.436719     15.029010    2013.0        9.0     37.437041   \n",
       "std        1.152806      7.931816       0.0        0.0      1.152415   \n",
       "min       35.000000      1.000000    2013.0        9.0     35.000000   \n",
       "25%       36.000000      8.000000    2013.0        9.0     36.000000   \n",
       "50%       37.000000     15.000000    2013.0        9.0     37.000000   \n",
       "75%       38.000000     22.000000    2013.0        9.0     38.000000   \n",
       "max       39.000000     28.000000    2013.0        9.0     39.000000   \n",
       "\n",
       "            end_day      end_hour  avg_trip_duration_each_hour   day_of_week  \n",
       "count  46673.000000  46673.000000                 46673.000000  46673.000000  \n",
       "mean      15.032867     14.313757                    13.466152      4.100893  \n",
       "std        7.931520      4.918672                     0.920047      1.948041  \n",
       "min        1.000000      0.000000                    10.200000      1.000000  \n",
       "25%        8.000000     11.000000                    12.900000      2.000000  \n",
       "50%       15.000000     15.000000                    13.500000      4.000000  \n",
       "75%       22.000000     18.000000                    14.100000      6.000000  \n",
       "max       29.000000     23.000000                    14.700000      7.000000  \n",
       "\n",
       "[8 rows x 23 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e2c9c808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bike_id                           0\n",
       "weekday                           0\n",
       "start_hour                        0\n",
       "start_time                        0\n",
       "start_station_id                  0\n",
       "start_station_name                0\n",
       "start_station_latitude            0\n",
       "start_station_longitude           0\n",
       "end_time                          0\n",
       "end_station_id                    0\n",
       "end_station_name                  0\n",
       "end_station_latitude              0\n",
       "end_station_longitude             0\n",
       "trip_duration                     0\n",
       "subscriber                        0\n",
       "birth_year                     6482\n",
       "gender                            0\n",
       "gender_category                   0\n",
       "trip_duration_min                 0\n",
       "start_year                        0\n",
       "start_month                       0\n",
       "start_week                        0\n",
       "start_day                         0\n",
       "end_year                          0\n",
       "end_month                         0\n",
       "end_week                          0\n",
       "end_day                           0\n",
       "end_hour                          0\n",
       "days_category                     0\n",
       "peak_hours                        0\n",
       "avg_trip_duration_each_hour       0\n",
       "day_of_week                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check null values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdb15d65",
   "metadata": {},
   "source": [
    "#### Check birth_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ae4b2150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40191.000000\n",
       "mean      1975.608470\n",
       "std         11.085518\n",
       "min       1899.000000\n",
       "25%       1968.000000\n",
       "50%       1978.000000\n",
       "75%       1984.000000\n",
       "max       1997.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "26dde0ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "birth_year\n",
       "NaN       6482\n",
       "1981.0    1725\n",
       "1985.0    1712\n",
       "1982.0    1686\n",
       "1984.0    1683\n",
       "          ... \n",
       "1929.0       1\n",
       "1917.0       1\n",
       "1926.0       1\n",
       "1924.0       1\n",
       "1921.0       1\n",
       "Name: count, Length: 77, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['birth_year'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4fd5643",
   "metadata": {},
   "source": [
    "#### Observation\n",
    "- NaN values from users who did not input their birth data\n",
    "- In the previous exercise I left this NaN out because it could be an indication for new users\n",
    "- In this exercise I will create a new df by excluding these NaN values in birth_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0f1d7822",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/kj/ff_yw10j6_zbkk839hkzgftr0000gn/T/ipykernel_18613/2788466860.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(df['birth_year'], bins = 50)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='birth_year', ylabel='Density'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Extreme value check\n",
    "\n",
    "sns.distplot(df['birth_year'], bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1e0f1dd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "birth_year\n",
       "1935.0    13\n",
       "1932.0    10\n",
       "1939.0     8\n",
       "1899.0     8\n",
       "1900.0     7\n",
       "1938.0     7\n",
       "1937.0     6\n",
       "1901.0     5\n",
       "1922.0     3\n",
       "1936.0     3\n",
       "1933.0     3\n",
       "1934.0     2\n",
       "1917.0     1\n",
       "1929.0     1\n",
       "1926.0     1\n",
       "1910.0     1\n",
       "1924.0     1\n",
       "1921.0     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_age_old = df.loc[df['birth_year'] < 1940]\n",
    "df_age_old['birth_year'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "300a7d1c",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "I will create a new pdf excluding NaN's birth_year and birth_year under 1940"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "64966325",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nan = df[df['birth_year'].isnull() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "294a6a0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6482,)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nan['birth_year'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "73c7ab41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new dataframe excluding the missing values\n",
    "# This time setting the isnull() condition to False instead of True (I want non-missing values as opposed to missing values) \n",
    "\n",
    "df_age_clean = df[df['birth_year'].isnull() == False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "585818f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(46673,)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['birth_year'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8a65832b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40191,)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_age_clean['birth_year'].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b76871e8",
   "metadata": {},
   "source": [
    "The calculation is correct!\n",
    " - 46673 - 40191 = 6482 (exactly the NaN values from birth_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6ff9e9b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "birth_year\n",
       "1935.0    13\n",
       "1932.0    10\n",
       "1939.0     8\n",
       "1899.0     8\n",
       "1900.0     7\n",
       "1938.0     7\n",
       "1937.0     6\n",
       "1901.0     5\n",
       "1922.0     3\n",
       "1936.0     3\n",
       "1933.0     3\n",
       "1934.0     2\n",
       "1917.0     1\n",
       "1929.0     1\n",
       "1926.0     1\n",
       "1910.0     1\n",
       "1924.0     1\n",
       "1921.0     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now continue excluding the birth_year under 1940\n",
    "df_age_old['birth_year'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c3e8f9c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the count\n",
    "df_age_old['birth_year'].value_counts(dropna = False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2c3d2bbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40191,)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_age_clean['birth_year'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8fb94a38",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean = df_age_clean.loc[~df_age_clean['birth_year'].isin ([\n",
    "1935.0,    \n",
    "1932.0,    \n",
    "1939.0,     \n",
    "1899.0,     \n",
    "1900.0,     \n",
    "1938.0,     \n",
    "1937.0,     \n",
    "1901.0,     \n",
    "1922.0,     \n",
    "1936.0,     \n",
    "1933.0,     \n",
    "1934.0,     \n",
    "1917.0,     \n",
    "1929.0,     \n",
    "1926.0,     \n",
    "1910.0,     \n",
    "1924.0,     \n",
    "1921.0  ])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0c7e54cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40110, 32)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c30d7e76",
   "metadata": {},
   "source": [
    "The calculation is correct!\n",
    " - 40191 - 40110 = 81 (exactly the count of the birth_year under 1940)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c8fcc4b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40110.000000\n",
       "mean      1975.710297\n",
       "std         10.840430\n",
       "min       1940.000000\n",
       "25%       1968.000000\n",
       "50%       1978.000000\n",
       "75%       1984.000000\n",
       "max       1997.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ca76689f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['birth_year'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b44a8121",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/kj/ff_yw10j6_zbkk839hkzgftr0000gn/T/ipykernel_18613/4065121901.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_clean['birth_year'] = df_clean['birth_year'].astype(int)\n"
     ]
    }
   ],
   "source": [
    "df_clean['birth_year'] = df_clean['birth_year'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "44ac7840",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['birth_year'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "06b872c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bike_id                        0\n",
       "weekday                        0\n",
       "start_hour                     0\n",
       "start_time                     0\n",
       "start_station_id               0\n",
       "start_station_name             0\n",
       "start_station_latitude         0\n",
       "start_station_longitude        0\n",
       "end_time                       0\n",
       "end_station_id                 0\n",
       "end_station_name               0\n",
       "end_station_latitude           0\n",
       "end_station_longitude          0\n",
       "trip_duration                  0\n",
       "subscriber                     0\n",
       "birth_year                     0\n",
       "gender                         0\n",
       "gender_category                0\n",
       "trip_duration_min              0\n",
       "start_year                     0\n",
       "start_month                    0\n",
       "start_week                     0\n",
       "start_day                      0\n",
       "end_year                       0\n",
       "end_month                      0\n",
       "end_week                       0\n",
       "end_day                        0\n",
       "end_hour                       0\n",
       "days_category                  0\n",
       "peak_hours                     0\n",
       "avg_trip_duration_each_hour    0\n",
       "day_of_week                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c0adc4f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bike_id                          int64\n",
       "weekday                         object\n",
       "start_hour                       int64\n",
       "start_time                      object\n",
       "start_station_id                 int64\n",
       "start_station_name              object\n",
       "start_station_latitude         float64\n",
       "start_station_longitude        float64\n",
       "end_time                        object\n",
       "end_station_id                   int64\n",
       "end_station_name                object\n",
       "end_station_latitude           float64\n",
       "end_station_longitude          float64\n",
       "trip_duration                    int64\n",
       "subscriber                      object\n",
       "birth_year                       int64\n",
       "gender                           int64\n",
       "gender_category                 object\n",
       "trip_duration_min                int64\n",
       "start_year                       int64\n",
       "start_month                      int64\n",
       "start_week                       int64\n",
       "start_day                        int64\n",
       "end_year                         int64\n",
       "end_month                        int64\n",
       "end_week                         int64\n",
       "end_day                          int64\n",
       "end_hour                         int64\n",
       "days_category                   object\n",
       "peak_hours                      object\n",
       "avg_trip_duration_each_hour    float64\n",
       "day_of_week                      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b056fc",
   "metadata": {},
   "source": [
    "Select variables that seem good for analysis\n",
    "- start_hour\n",
    "- birth_year\n",
    "- avg_trip_duration_each_hour "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ce19f37",
   "metadata": {},
   "source": [
    "#### Analysis per day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7ee69f5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weekday\n",
       "Fri    6589\n",
       "Wed    6478\n",
       "Tue    6414\n",
       "Thu    6205\n",
       "Mon    5124\n",
       "Sat    4963\n",
       "Sun    4337\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['weekday'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "248a4193",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weekday\n",
       "Fri    6589\n",
       "Mon    5124\n",
       "Sat    4963\n",
       "Sun    4337\n",
       "Thu    6205\n",
       "Tue    6414\n",
       "Wed    6478\n",
       "Name: start_hour, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rides per day\n",
    "df_day = df_clean.groupby('weekday')['start_hour'].count()\n",
    "df_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "905a9bf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weekday\n",
       "Fri    12.227804\n",
       "Mon    12.256635\n",
       "Sat    12.904292\n",
       "Sun    13.192991\n",
       "Thu    12.014504\n",
       "Tue    12.003586\n",
       "Wed    12.227694\n",
       "Name: trip_duration_min, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average trip duration per day\n",
    "df_avg_trip = df_clean.groupby('weekday')['trip_duration_min'].mean()\n",
    "df_avg_trip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3f8b5ef6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weekday\n",
       "Fri    1975.500379\n",
       "Mon    1975.482045\n",
       "Sat    1976.978037\n",
       "Sun    1976.813235\n",
       "Thu    1975.175665\n",
       "Tue    1975.281104\n",
       "Wed    1975.331738\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average age per day\n",
    "df_avg_age = df_clean.groupby('weekday')['birth_year'].mean()\n",
    "df_avg_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "544d166a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fri</td>\n",
       "      <td>6589</td>\n",
       "      <td>12.227804</td>\n",
       "      <td>1975.500379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mon</td>\n",
       "      <td>5124</td>\n",
       "      <td>12.256635</td>\n",
       "      <td>1975.482045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sat</td>\n",
       "      <td>4963</td>\n",
       "      <td>12.904292</td>\n",
       "      <td>1976.978037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sun</td>\n",
       "      <td>4337</td>\n",
       "      <td>13.192991</td>\n",
       "      <td>1976.813235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Thu</td>\n",
       "      <td>6205</td>\n",
       "      <td>12.014504</td>\n",
       "      <td>1975.175665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tue</td>\n",
       "      <td>6414</td>\n",
       "      <td>12.003586</td>\n",
       "      <td>1975.281104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Wed</td>\n",
       "      <td>6478</td>\n",
       "      <td>12.227694</td>\n",
       "      <td>1975.331738</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  day_of_week  ride_count  avg_duration      avg_age\n",
       "0         Fri        6589     12.227804  1975.500379\n",
       "1         Mon        5124     12.256635  1975.482045\n",
       "2         Sat        4963     12.904292  1976.978037\n",
       "3         Sun        4337     13.192991  1976.813235\n",
       "4         Thu        6205     12.014504  1975.175665\n",
       "5         Tue        6414     12.003586  1975.281104\n",
       "6         Wed        6478     12.227694  1975.331738"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Put it together\n",
    "df_result = pd.DataFrame({'day_of_week': df_day.index, 'ride_count': df_day.values, 'avg_duration': df_avg_trip.values, 'avg_age': df_avg_age.values})\n",
    "df_result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6038a08",
   "metadata": {},
   "source": [
    "#### Analysis per 24 hours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bc689693",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "start_hour\n",
       "17    4117\n",
       "18    3983\n",
       "8     2944\n",
       "16    2817\n",
       "19    2728\n",
       "9     2434\n",
       "15    2260\n",
       "13    2238\n",
       "14    2223\n",
       "12    2194\n",
       "7     1883\n",
       "20    1800\n",
       "11    1694\n",
       "10    1691\n",
       "21    1287\n",
       "22    1100\n",
       "6      843\n",
       "23     765\n",
       "0      391\n",
       "1      244\n",
       "5      179\n",
       "2      138\n",
       "3       87\n",
       "4       70\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['start_hour'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d74afe2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "start_hour\n",
       "0      391\n",
       "1      244\n",
       "2      138\n",
       "3       87\n",
       "4       70\n",
       "5      179\n",
       "6      843\n",
       "7     1883\n",
       "8     2944\n",
       "9     2434\n",
       "10    1691\n",
       "11    1694\n",
       "12    2194\n",
       "13    2238\n",
       "14    2223\n",
       "15    2260\n",
       "16    2817\n",
       "17    4117\n",
       "18    3983\n",
       "19    2728\n",
       "20    1800\n",
       "21    1287\n",
       "22    1100\n",
       "23     765\n",
       "Name: start_hour, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rides per hour\n",
    "df_hour = df_clean.groupby('start_hour')['start_hour'].count()\n",
    "df_hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a3f56b1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "start_hour\n",
       "0     11.933504\n",
       "1     11.135246\n",
       "2     10.615942\n",
       "3     10.954023\n",
       "4     10.500000\n",
       "5      9.564246\n",
       "6     10.289442\n",
       "7     11.587892\n",
       "8     12.119226\n",
       "9     11.702136\n",
       "10    11.958013\n",
       "11    12.184179\n",
       "12    11.666363\n",
       "13    11.938785\n",
       "14    12.479532\n",
       "15    12.650000\n",
       "16    13.088747\n",
       "17    13.183629\n",
       "18    13.323876\n",
       "19    12.550953\n",
       "20    12.471667\n",
       "21    12.468531\n",
       "22    11.900000\n",
       "23    11.677124\n",
       "Name: trip_duration_min, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average trip duration per hour\n",
    "df_avg_trip1 = df_clean.groupby('start_hour')['trip_duration_min'].mean()\n",
    "df_avg_trip1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7b106949",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "start_hour\n",
       "0     1979.363171\n",
       "1     1979.225410\n",
       "2     1978.427536\n",
       "3     1981.482759\n",
       "4     1974.485714\n",
       "5     1975.424581\n",
       "6     1974.631079\n",
       "7     1973.909187\n",
       "8     1974.951427\n",
       "9     1974.819638\n",
       "10    1974.746895\n",
       "11    1974.708973\n",
       "12    1975.091613\n",
       "13    1974.881144\n",
       "14    1975.116509\n",
       "15    1974.946018\n",
       "16    1974.713880\n",
       "17    1975.263541\n",
       "18    1976.421542\n",
       "19    1977.102273\n",
       "20    1978.401667\n",
       "21    1978.134421\n",
       "22    1978.428182\n",
       "23    1978.749020\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average age per hour\n",
    "df_avg_age1 = df_clean.groupby('start_hour')['birth_year'].mean()\n",
    "df_avg_age1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "55f1ecf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_hour</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>391</td>\n",
       "      <td>11.933504</td>\n",
       "      <td>1979.363171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>244</td>\n",
       "      <td>11.135246</td>\n",
       "      <td>1979.225410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>10.615942</td>\n",
       "      <td>1978.427536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>87</td>\n",
       "      <td>10.954023</td>\n",
       "      <td>1981.482759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>1974.485714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>179</td>\n",
       "      <td>9.564246</td>\n",
       "      <td>1975.424581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>843</td>\n",
       "      <td>10.289442</td>\n",
       "      <td>1974.631079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>1883</td>\n",
       "      <td>11.587892</td>\n",
       "      <td>1973.909187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>2944</td>\n",
       "      <td>12.119226</td>\n",
       "      <td>1974.951427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>2434</td>\n",
       "      <td>11.702136</td>\n",
       "      <td>1974.819638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>1691</td>\n",
       "      <td>11.958013</td>\n",
       "      <td>1974.746895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>1694</td>\n",
       "      <td>12.184179</td>\n",
       "      <td>1974.708973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>2194</td>\n",
       "      <td>11.666363</td>\n",
       "      <td>1975.091613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>2238</td>\n",
       "      <td>11.938785</td>\n",
       "      <td>1974.881144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>2223</td>\n",
       "      <td>12.479532</td>\n",
       "      <td>1975.116509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>2260</td>\n",
       "      <td>12.650000</td>\n",
       "      <td>1974.946018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>2817</td>\n",
       "      <td>13.088747</td>\n",
       "      <td>1974.713880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>4117</td>\n",
       "      <td>13.183629</td>\n",
       "      <td>1975.263541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>3983</td>\n",
       "      <td>13.323876</td>\n",
       "      <td>1976.421542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>2728</td>\n",
       "      <td>12.550953</td>\n",
       "      <td>1977.102273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>1800</td>\n",
       "      <td>12.471667</td>\n",
       "      <td>1978.401667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>1287</td>\n",
       "      <td>12.468531</td>\n",
       "      <td>1978.134421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>1100</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>1978.428182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>765</td>\n",
       "      <td>11.677124</td>\n",
       "      <td>1978.749020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    start_hour  ride_count  avg_duration      avg_age\n",
       "0            0         391     11.933504  1979.363171\n",
       "1            1         244     11.135246  1979.225410\n",
       "2            2         138     10.615942  1978.427536\n",
       "3            3          87     10.954023  1981.482759\n",
       "4            4          70     10.500000  1974.485714\n",
       "5            5         179      9.564246  1975.424581\n",
       "6            6         843     10.289442  1974.631079\n",
       "7            7        1883     11.587892  1973.909187\n",
       "8            8        2944     12.119226  1974.951427\n",
       "9            9        2434     11.702136  1974.819638\n",
       "10          10        1691     11.958013  1974.746895\n",
       "11          11        1694     12.184179  1974.708973\n",
       "12          12        2194     11.666363  1975.091613\n",
       "13          13        2238     11.938785  1974.881144\n",
       "14          14        2223     12.479532  1975.116509\n",
       "15          15        2260     12.650000  1974.946018\n",
       "16          16        2817     13.088747  1974.713880\n",
       "17          17        4117     13.183629  1975.263541\n",
       "18          18        3983     13.323876  1976.421542\n",
       "19          19        2728     12.550953  1977.102273\n",
       "20          20        1800     12.471667  1978.401667\n",
       "21          21        1287     12.468531  1978.134421\n",
       "22          22        1100     11.900000  1978.428182\n",
       "23          23         765     11.677124  1978.749020"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Put it together\n",
    "df_result1 = pd.DataFrame({'start_hour': df_hour.index, 'ride_count': df_hour.values, 'avg_duration': df_avg_trip1.values, 'avg_age': df_avg_age1.values})\n",
    "df_result1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7efd521",
   "metadata": {},
   "source": [
    "Observation:\n",
    "- The results seem reasonable as more young people tend to ride at night compared to old ones"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cceacca",
   "metadata": {},
   "source": [
    "### The Elbow Technique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f6d580fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_cl = range(1, 10) # Defines the range of potential clusters in the data.\n",
    "kmeans = [KMeans(n_clusters=i) for i in num_cl] # Defines k-means clusters in the range assigned above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2cdd6bb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[-32575004.859283153,\n",
       " -9473579.056005482,\n",
       " -3870805.5186748207,\n",
       " -1787791.3001294665,\n",
       " -848039.3007127657,\n",
       " -337890.28246039443,\n",
       " -186127.05801893215,\n",
       " -133307.52478861867,\n",
       " -99589.06065695983]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score = [kmeans[i].fit(df_result1).score(df_result1) for i in range(len(kmeans))] # Creates a score that represents \n",
    "# a rate of variation for the given cluster option.\n",
    "\n",
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4066761c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the elbow curve using PyLab.\n",
    "\n",
    "pl.plot(num_cl,score)\n",
    "pl.xlabel('Number of Clusters')\n",
    "pl.ylabel('Score')\n",
    "pl.title('Elbow Curve')\n",
    "pl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a147f61",
   "metadata": {},
   "source": [
    "#### After 4 on the x-axis, the curve straightens out. I will take 4 as the optimal count for this clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c4036df",
   "metadata": {},
   "source": [
    "### k-means clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5866a78e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the k-means object.\n",
    "\n",
    "kmeans = KMeans(n_clusters = 4) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f589183f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=4)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=4)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the k-means object to the data.\n",
    "\n",
    "kmeans.fit(df_result1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3e975ef5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n"
     ]
    }
   ],
   "source": [
    "df_result1['clusters'] = kmeans.fit_predict(df_result1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "35aa3f83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_hour</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "      <th>clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>391</td>\n",
       "      <td>11.933504</td>\n",
       "      <td>1979.363171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>244</td>\n",
       "      <td>11.135246</td>\n",
       "      <td>1979.225410</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>10.615942</td>\n",
       "      <td>1978.427536</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>87</td>\n",
       "      <td>10.954023</td>\n",
       "      <td>1981.482759</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>1974.485714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   start_hour  ride_count  avg_duration      avg_age  clusters\n",
       "0           0         391     11.933504  1979.363171         0\n",
       "1           1         244     11.135246  1979.225410         0\n",
       "2           2         138     10.615942  1978.427536         0\n",
       "3           3          87     10.954023  1981.482759         0\n",
       "4           4          70     10.500000  1974.485714         0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "332b337c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "clusters\n",
       "0    8\n",
       "1    8\n",
       "2    6\n",
       "3    2\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result1['clusters'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "67d50444",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the clusters for the \"start_hour\" and \"ride_count\" variables.\n",
    "\n",
    "plt.figure(figsize = (8,6))\n",
    "ax = sns.scatterplot(x = df_result1['start_hour'], y = df_result1['ride_count'], hue = kmeans.labels_, s = 100) \n",
    "# Here, you're subsetting `X` for the x and y arguments to avoid using their labels. \n",
    "# `hue` takes the value of the attribute `kmeans.labels_`, which is the result of running the k-means algorithm.\n",
    "# `s` represents the size of the points you want to see in the plot.\n",
    "\n",
    "ax.grid(False) # This removes the grid from the background.\n",
    "plt.title('Start hour vs Total ride') \n",
    "plt.xlabel('Start hour') # Label x-axis.\n",
    "plt.ylabel('Ride count') # Label y-axis.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fd8f789",
   "metadata": {},
   "source": [
    "#### Peak hours:\n",
    "- 8am = 3095 rides count\n",
    "- 16pm = 3509 rides count\n",
    "- 17pm = 4736 rides count\n",
    "- 18pm = 4546 rides count\n",
    "- 19pm = 3084 rides count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2480d504",
   "metadata": {},
   "source": [
    "#### Obsevation:\n",
    "- Cluster 0: Is one of the most populated clusters (along with cluster 1). This cluster collects data points with a very late start time of ride around 23 pm to early morning 6 am and has the least number of ride compared to other clusters\n",
    "- Cluster 1: Is one of the most populated clusters (along with cluster 0). This cluster is spread throughout the morning until the afternoon. This cluster occupies 8 am which is the only peak hour in the morning and is also spread over the peak hours in the evening. This cluster has a higher number of ride compared to other clusters (cluster 0 and cluster 2).This cluster may be filled by workers who may rent bicycles to commute to work during rush hour to and from work\n",
    "- Cluster 2: This cluster only occupies the morning and evening hours. The number of ride is lower than in the previous cluster, but still higher than in cluster 0\n",
    "- Cluster 3: This cluster is right at peak rush hour (which are 17pm and 18pm) and has high number of ride compared to other clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81fb8b19",
   "metadata": {},
   "source": [
    "#### Further Analysis:\n",
    "In this cluster I use 4 variables:\n",
    "- start_hour\t\n",
    "- ride_count\t\n",
    "- avg_duration\t\n",
    "- avg_age\n",
    "\n",
    "Since I have used start_hour and ride_count as X and Y then I think those colors might belong to 2 other variables (avg_duration and avg_age). I'm going to do a quick check of these 2 variables to see at a glance if there is any relationship to each other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "cc74fb7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>...</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16013</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:18:55</td>\n",
       "      <td>523</td>\n",
       "      <td>W 38 St &amp; 8 Ave</td>\n",
       "      <td>40.754666</td>\n",
       "      <td>-73.991382</td>\n",
       "      <td>2013-09-09 18:35:28</td>\n",
       "      <td>334</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15230</td>\n",
       "      <td>Thu</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-12 18:38:53</td>\n",
       "      <td>257</td>\n",
       "      <td>Lispenard St &amp; Broadway</td>\n",
       "      <td>40.719392</td>\n",
       "      <td>-74.002472</td>\n",
       "      <td>2013-09-12 18:48:34</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15973</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-16 18:45:05</td>\n",
       "      <td>167</td>\n",
       "      <td>E 39 St &amp; 3 Ave</td>\n",
       "      <td>40.748901</td>\n",
       "      <td>-73.976049</td>\n",
       "      <td>2013-09-16 18:47:59</td>\n",
       "      <td>440</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18846</td>\n",
       "      <td>Tue</td>\n",
       "      <td>17</td>\n",
       "      <td>2013-09-24 17:48:27</td>\n",
       "      <td>505</td>\n",
       "      <td>6 Ave &amp; W 33 St</td>\n",
       "      <td>40.749013</td>\n",
       "      <td>-73.988484</td>\n",
       "      <td>2013-09-24 18:02:04</td>\n",
       "      <td>459</td>\n",
       "      <td>...</td>\n",
       "      <td>24</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>24</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>15136</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:45:24</td>\n",
       "      <td>385</td>\n",
       "      <td>E 55 St &amp; 2 Ave</td>\n",
       "      <td>40.757973</td>\n",
       "      <td>-73.966033</td>\n",
       "      <td>2013-09-09 19:05:26</td>\n",
       "      <td>435</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>19</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    bike_id weekday  start_hour           start_time  start_station_id  \\\n",
       "0     16013     Mon          18  2013-09-09 18:18:55               523   \n",
       "1     15230     Thu          18  2013-09-12 18:38:53               257   \n",
       "14    15973     Mon          18  2013-09-16 18:45:05               167   \n",
       "17    18846     Tue          17  2013-09-24 17:48:27               505   \n",
       "21    15136     Mon          18  2013-09-09 18:45:24               385   \n",
       "\n",
       "         start_station_name  start_station_latitude  start_station_longitude  \\\n",
       "0           W 38 St & 8 Ave               40.754666               -73.991382   \n",
       "1   Lispenard St & Broadway               40.719392               -74.002472   \n",
       "14          E 39 St & 3 Ave               40.748901               -73.976049   \n",
       "17          6 Ave & W 33 St               40.749013               -73.988484   \n",
       "21          E 55 St & 2 Ave               40.757973               -73.966033   \n",
       "\n",
       "               end_time  end_station_id  ... start_day  end_year  end_month  \\\n",
       "0   2013-09-09 18:35:28             334  ...         9      2013          9   \n",
       "1   2013-09-12 18:48:34             236  ...        12      2013          9   \n",
       "14  2013-09-16 18:47:59             440  ...        16      2013          9   \n",
       "17  2013-09-24 18:02:04             459  ...        24      2013          9   \n",
       "21  2013-09-09 19:05:26             435  ...         9      2013          9   \n",
       "\n",
       "    end_week end_day  end_hour  days_category  peak_hours  \\\n",
       "0         37       9        18       Weekdays  Peak hours   \n",
       "1         37      12        18       Weekdays  Peak hours   \n",
       "14        38      16        18       Weekdays  Peak hours   \n",
       "17        39      24        18       Weekdays  Peak hours   \n",
       "21        37       9        19       Weekdays  Peak hours   \n",
       "\n",
       "    avg_trip_duration_each_hour  day_of_week  \n",
       "0                          14.1            2  \n",
       "1                          14.1            5  \n",
       "14                         14.1            2  \n",
       "17                         14.0            3  \n",
       "21                         14.1            2  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check users at 17pm and 18pm (new subset)\n",
    "df_peak = df_clean.loc[df['start_hour'].isin([17,18])]\n",
    "df_peak.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d6c8c8b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8100, 32)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_peak.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9032afd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    8100.000000\n",
       "mean       14.049173\n",
       "std         0.049996\n",
       "min        14.000000\n",
       "25%        14.000000\n",
       "50%        14.000000\n",
       "75%        14.100000\n",
       "max        14.100000\n",
       "Name: avg_trip_duration_each_hour, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_peak['avg_trip_duration_each_hour'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a9e56c3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40110.000000\n",
       "mean        13.419683\n",
       "std          0.937933\n",
       "min         10.200000\n",
       "25%         12.700000\n",
       "50%         13.500000\n",
       "75%         14.100000\n",
       "max         14.700000\n",
       "Name: avg_trip_duration_each_hour, dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_clean['avg_trip_duration_each_hour'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ee4b740",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "Rush hour has a higher average trip duration than other normal hours, and this is actually interesting because I analyzed this relationship in the previous exercise (the closer to rush hour, the higher the average trip duration). It seems they do have a relationship with each other and I will do further analysis based on your feedback at the end of this exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7e8e6dfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    8100.000000\n",
       "mean     1975.832963\n",
       "std        10.638587\n",
       "min      1940.000000\n",
       "25%      1969.000000\n",
       "50%      1978.000000\n",
       "75%      1984.000000\n",
       "max      1997.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with age)\n",
    "df_peak['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f26f3e46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40110.000000\n",
       "mean      1975.710297\n",
       "std         10.840430\n",
       "min       1940.000000\n",
       "25%       1968.000000\n",
       "50%       1978.000000\n",
       "75%       1984.000000\n",
       "max       1997.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with age)\n",
    "df_clean['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa039007",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "Can't draw any conclusions from this since they look the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b14b70d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the clusters for the \"start_hour\" and \"avg_duration\" variables.\n",
    "\n",
    "plt.figure(figsize = (8,6))\n",
    "ax = sns.scatterplot(x = df_result1['start_hour'], y = df_result1['avg_duration'], hue = kmeans.labels_, s = 100) \n",
    "# Here, you're subsetting `X` for the x and y arguments to avoid using their labels. \n",
    "# `hue` takes the value of the attribute `kmeans.labels_`, which is the result of running the k-means algorithm.\n",
    "# `s` represents the size of the points you want to see in the plot.\n",
    "\n",
    "ax.grid(False) # This removes the grid from the background.\n",
    "plt.title('Start hour vs Average ride (min)') \n",
    "plt.xlabel('Start hour') # Label x-axis.\n",
    "plt.ylabel('Average ride (min)') # Label y-axis.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73599f3a",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "- This confirm my previous observation that cluster 3 that is right at peak rush hour (which are 17pm and 18pm) has higher average ride duration\n",
    "- Clusters 1 and 2 appear to have almost the same average trip duration\n",
    "- Cluster 0 has set my sights on further analysis. This cluster not only has the fewest number of ride (from the previous figure) but also has a shorter average ride duration and late riding start times"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aac61f08",
   "metadata": {},
   "source": [
    "#### Further Analysis:\n",
    "I will create a new subset containing those who start riding from 11pm to 6am"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "9350692b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>...</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>15316</td>\n",
       "      <td>Fri</td>\n",
       "      <td>23</td>\n",
       "      <td>2013-09-06 23:02:53</td>\n",
       "      <td>251</td>\n",
       "      <td>Mott St &amp; Prince St</td>\n",
       "      <td>40.723180</td>\n",
       "      <td>-73.994800</td>\n",
       "      <td>2013-09-06 23:23:43</td>\n",
       "      <td>460</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>6</td>\n",
       "      <td>23</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>12.6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>15522</td>\n",
       "      <td>Sun</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-09-22 02:02:47</td>\n",
       "      <td>393</td>\n",
       "      <td>E 5 St &amp; Avenue C</td>\n",
       "      <td>40.722992</td>\n",
       "      <td>-73.979955</td>\n",
       "      <td>2013-09-22 02:19:34</td>\n",
       "      <td>2022</td>\n",
       "      <td>...</td>\n",
       "      <td>22</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>12.2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>19355</td>\n",
       "      <td>Mon</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-09-23 06:54:47</td>\n",
       "      <td>404</td>\n",
       "      <td>9 Ave &amp; W 14 St</td>\n",
       "      <td>40.740583</td>\n",
       "      <td>-74.005509</td>\n",
       "      <td>2013-09-23 07:16:13</td>\n",
       "      <td>296</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>23</td>\n",
       "      <td>7</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>10.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>19177</td>\n",
       "      <td>Wed</td>\n",
       "      <td>23</td>\n",
       "      <td>2013-09-25 23:20:58</td>\n",
       "      <td>116</td>\n",
       "      <td>W 17 St &amp; 8 Ave</td>\n",
       "      <td>40.741776</td>\n",
       "      <td>-74.001497</td>\n",
       "      <td>2013-09-25 23:30:38</td>\n",
       "      <td>477</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>12.6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>15258</td>\n",
       "      <td>Thu</td>\n",
       "      <td>0</td>\n",
       "      <td>2013-09-12 00:23:28</td>\n",
       "      <td>254</td>\n",
       "      <td>W 11 St &amp; 6 Ave</td>\n",
       "      <td>40.735324</td>\n",
       "      <td>-73.998004</td>\n",
       "      <td>2013-09-12 00:29:27</td>\n",
       "      <td>433</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>13.1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    bike_id weekday  start_hour           start_time  start_station_id  \\\n",
       "10    15316     Fri          23  2013-09-06 23:02:53               251   \n",
       "11    15522     Sun           2  2013-09-22 02:02:47               393   \n",
       "15    19355     Mon           6  2013-09-23 06:54:47               404   \n",
       "31    19177     Wed          23  2013-09-25 23:20:58               116   \n",
       "69    15258     Thu           0  2013-09-12 00:23:28               254   \n",
       "\n",
       "     start_station_name  start_station_latitude  start_station_longitude  \\\n",
       "10  Mott St & Prince St               40.723180               -73.994800   \n",
       "11    E 5 St & Avenue C               40.722992               -73.979955   \n",
       "15      9 Ave & W 14 St               40.740583               -74.005509   \n",
       "31      W 17 St & 8 Ave               40.741776               -74.001497   \n",
       "69      W 11 St & 6 Ave               40.735324               -73.998004   \n",
       "\n",
       "               end_time  end_station_id  ... start_day  end_year  end_month  \\\n",
       "10  2013-09-06 23:23:43             460  ...         6      2013          9   \n",
       "11  2013-09-22 02:19:34            2022  ...        22      2013          9   \n",
       "15  2013-09-23 07:16:13             296  ...        23      2013          9   \n",
       "31  2013-09-25 23:30:38             477  ...        25      2013          9   \n",
       "69  2013-09-12 00:29:27             433  ...        12      2013          9   \n",
       "\n",
       "    end_week end_day  end_hour  days_category    peak_hours  \\\n",
       "10        36       6        23       Weekdays  Normal hours   \n",
       "11        38      22         2        Weekend  Normal hours   \n",
       "15        39      23         7       Weekdays  Normal hours   \n",
       "31        39      25        23       Weekdays  Normal hours   \n",
       "69        37      12         0       Weekdays  Normal hours   \n",
       "\n",
       "    avg_trip_duration_each_hour  day_of_week  \n",
       "10                         12.6            6  \n",
       "11                         12.2            1  \n",
       "15                         10.5            2  \n",
       "31                         12.6            4  \n",
       "69                         13.1            5  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check users from 23pm till 5am (new subset)\n",
    "df_least = df_clean.loc[df['start_hour'].isin([23, 0, 1, 2, 3, 4, 5, 6])]\n",
    "df_least.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "e10fb3e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2717, 32)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_least.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "6e487385",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2717.000000\n",
       "mean       11.829076\n",
       "std         1.130597\n",
       "min        10.200000\n",
       "25%        10.500000\n",
       "50%        12.600000\n",
       "75%        12.600000\n",
       "max        13.100000\n",
       "Name: avg_trip_duration_each_hour, dtype: float64"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_least['avg_trip_duration_each_hour'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "476d6c35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40110.000000\n",
       "mean        13.419683\n",
       "std          0.937933\n",
       "min         10.200000\n",
       "25%         12.700000\n",
       "50%         13.500000\n",
       "75%         14.100000\n",
       "max         14.700000\n",
       "Name: avg_trip_duration_each_hour, dtype: float64"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_clean['avg_trip_duration_each_hour'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "617804a5",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "This cluster appears to have a shorter average ride duration. I think this makes sense as they ride between 11pm to 6am which means the roads are pretty quiet at that time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "981d03d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1874.000000\n",
       "mean     1978.565635\n",
       "std         9.925037\n",
       "min      1940.000000\n",
       "25%      1973.000000\n",
       "50%      1981.000000\n",
       "75%      1986.000000\n",
       "max      1996.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_least['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4194423b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40110.000000\n",
       "mean      1975.710297\n",
       "std         10.840430\n",
       "min       1940.000000\n",
       "25%       1968.000000\n",
       "50%       1978.000000\n",
       "75%       1984.000000\n",
       "max       1997.000000\n",
       "Name: birth_year, dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check any posibilities (with avg duration)\n",
    "df_clean['birth_year'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c08a2204",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "This cluster seems to have a younger average age. This could lead to another conclusion that late night hours are more populated by young people and that is why the average ride duration is slightly shorter because young people tend to ride faster and because also late night hours mean less traffic jams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b115137f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the clusters for the \"start_hour\" and \"avg_age\" variables.\n",
    "\n",
    "plt.figure(figsize = (8,6))\n",
    "ax = sns.scatterplot(x = df_result1['start_hour'], y = df_result1['avg_age'], hue = kmeans.labels_, s = 100) \n",
    "# Here, you're subsetting `X` for the x and y arguments to avoid using their labels. \n",
    "# `hue` takes the value of the attribute `kmeans.labels_`, which is the result of running the k-means algorithm.\n",
    "# `s` represents the size of the points you want to see in the plot.\n",
    "\n",
    "ax.grid(False) # This removes the grid from the background.\n",
    "plt.title('Start hour vs Average age') \n",
    "plt.xlabel('Start hour') # Label x-axis.\n",
    "plt.ylabel('Average age') # Label y-axis.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d035805",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "- This confirms my previous observation that cluster 0 is inhabited by more young people than other clusters\n",
    "- Cluster 1 is dominated by older people compared to other clusters\n",
    "- From a quick glance, I can see that the younger the age, the later they start to ride"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "aa2243c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the clusters for the \"avg_duration\" and \"avg_age\" variables.\n",
    "\n",
    "plt.figure(figsize = (8,6))\n",
    "ax = sns.scatterplot(x = df_result1['avg_duration'], y = df_result1['avg_age'], hue = kmeans.labels_, s = 100) \n",
    "# Here, you're subsetting `X` for the x and y arguments to avoid using their labels. \n",
    "# `hue` takes the value of the attribute `kmeans.labels_`, which is the result of running the k-means algorithm.\n",
    "# `s` represents the size of the points you want to see in the plot.\n",
    "\n",
    "ax.grid(False) # This removes the grid from the background.\n",
    "plt.title('Average ride (min) vs Average age') \n",
    "plt.xlabel('Average ride (min)') # Label x-axis.\n",
    "plt.ylabel('Average age') # Label y-axis.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fef374f",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "- This confirms my previous observation that the younger people has a shorter average ride duration\n",
    "- Cluster 1 has a population of almost the same age as 1975 and this is also a cluster that is evenly distributed throughout the morning until the evening\n",
    "- Cluster 3 has the highest average ride duration (this makes sense as rush hour roads tend to be busy). For me this is also interesting because this cluster not only stands right at rush hour at 17pm and 18pm, but they are also filled with more old people"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9c46ad7",
   "metadata": {},
   "source": [
    "### Feedback from 6.4\n",
    "Quick tip regarding the \"Start hour\" x \"Average trip duration\": in the plot we can see there is some sort of relationship, it's just not linear.\n",
    "One way of dealing with this would be to transform the X variable into categories:\n",
    "- between 0 and 5 (a)\n",
    "- between 5 and 15 (b)\n",
    "- greater than 15 (c)\n",
    "\n",
    "and have different regression models for each"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2166b512",
   "metadata": {},
   "source": [
    "#### In this case I will create a scatterplot for \"Start hour\" x \"Average trip duration\" with normal df (dataframe including those users who didn't input their birth of date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a1694ac5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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IiKi16FzmImLi8P48eMRERGBevXqoV69eliwYAHu3LljiPqIZEXb88jwfDNERPqj81WzXxYdHY1NmzZh8+bNuHLlClq2bIn9+/frs77XxqtmkzEUNFuJQYaIqHC6/H6/VpgBgKysLPzvf//D1KlTce7cOWRlZb3O5vSOYYaMhWcAJiIqOl1+v3UeAJzjzz//xMaNG/HLL7/g2bNneOeddzB37tyibo6o1GFwISIqHjqHmcmTJ2Pz5s2Ii4tDu3btsGTJEnTr1g2WlpaGqI+IiIioQDqHmYMHD2Ls2LHo06cPKlasqLEuKioK9evX11dtRERERIXSOcwcPXpU435SUhI2btyIH374AWfPni1xY2aIiIiodCvymJn9+/dj9erVCA0Nhbu7O3r27IlVq1bpszYqAdpN2okbLw0Rry4Be+cVfSzIoK934vDdf++3rAz8+DHHlhARUdHpNJvpzp07WLt2LVavXo20tDT07t0by5cvx9mzZ1G7dm1D1llknM1UdPqeXszpykREpC1dfr+1Pmlep06dULt2bVy6dAlff/014uLi8PXXX792sVQyFXZVZ12v+qzv7REREeXQOszs2bMH77//PmbOnInOnTvD1NTUkHWREbWbpF2w0LbdoK/1246IiOhlWoeZiIgIpKSkoGHDhmjcuDGWLVuGe/fuGbI2MpIbWh541Lbdy2Nk9NGOiIjoZVqHmaZNm2LlypWIj4/HsGHD8NNPP6Fy5crIzs5GeHg4UlJSDFknERERUZ50vtCkpaUlgoODceTIEZw/fx5jxoxBSEgIHBwc8M477xiiRiIiIqJ86RxmXlazZk31FbM3b96sr5rIyKpL+m3XsrJ+2xEREb3stS80WdJxanbRaDO7SJfp1PreHhERlW4GmZpNZUthwULX4KHv7REREeVgmKF8xYR0znUoqbpU9OARE9I516GklpUZZIiI6PXwMBMRERGVODzMRERERGUGwwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBEREckawwwRERHJGsMMERERyRrDDBER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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data prep for regression analysis\n",
    "# Create a scatterplot using matplotlib for another look at how the chosen variables plot against each other.\n",
    "\n",
    "df.plot(x = 'start_hour', y = 'avg_trip_duration_each_hour', style = 'o') # The style option creates a scatterplot; without it, we only have lines.\n",
    "plt.title('Start hour vs Average ride (min)')  \n",
    "plt.xlabel('Start hour')  \n",
    "plt.ylabel('Average ride (min)')  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "423f94df",
   "metadata": {},
   "outputs": [],
   "source": [
    "hours = []\n",
    "\n",
    "for value in df['start_hour']:\n",
    "    if value in [0, 1, 2, 3, 4, 5]:\n",
    "        hours.append('0am - 5am')\n",
    "    elif value in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]:\n",
    "        hours.append('6am - 15pm')\n",
    "    else:\n",
    "        hours.append('16pm - 23pm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2f286dab",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['hours_category'] = hours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a5195b37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>...</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>hours_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16013</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:18:55</td>\n",
       "      <td>523</td>\n",
       "      <td>W 38 St &amp; 8 Ave</td>\n",
       "      <td>40.754666</td>\n",
       "      <td>-73.991382</td>\n",
       "      <td>2013-09-09 18:35:28</td>\n",
       "      <td>334</td>\n",
       "      <td>...</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "      <td>16pm - 23pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15230</td>\n",
       "      <td>Thu</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-12 18:38:53</td>\n",
       "      <td>257</td>\n",
       "      <td>Lispenard St &amp; Broadway</td>\n",
       "      <td>40.719392</td>\n",
       "      <td>-74.002472</td>\n",
       "      <td>2013-09-12 18:48:34</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>5</td>\n",
       "      <td>16pm - 23pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17942</td>\n",
       "      <td>Wed</td>\n",
       "      <td>19</td>\n",
       "      <td>2013-09-18 19:44:04</td>\n",
       "      <td>479</td>\n",
       "      <td>9 Ave &amp; W 45 St</td>\n",
       "      <td>40.760193</td>\n",
       "      <td>-73.991255</td>\n",
       "      <td>2013-09-18 19:50:05</td>\n",
       "      <td>513</td>\n",
       "      <td>...</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>13.2</td>\n",
       "      <td>4</td>\n",
       "      <td>16pm - 23pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19683</td>\n",
       "      <td>Sat</td>\n",
       "      <td>11</td>\n",
       "      <td>2013-09-28 11:54:37</td>\n",
       "      <td>527</td>\n",
       "      <td>E 33 St &amp; 1 Ave</td>\n",
       "      <td>40.743156</td>\n",
       "      <td>-73.974347</td>\n",
       "      <td>2013-09-28 12:03:58</td>\n",
       "      <td>441</td>\n",
       "      <td>...</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>28</td>\n",
       "      <td>12</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7</td>\n",
       "      <td>6am - 15pm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18024</td>\n",
       "      <td>Sat</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-07 18:08:22</td>\n",
       "      <td>521</td>\n",
       "      <td>8 Ave &amp; W 31 St</td>\n",
       "      <td>40.750450</td>\n",
       "      <td>-73.994811</td>\n",
       "      <td>2013-09-07 18:46:38</td>\n",
       "      <td>476</td>\n",
       "      <td>...</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>7</td>\n",
       "      <td>16pm - 23pm</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   bike_id weekday  start_hour           start_time  start_station_id  \\\n",
       "0    16013     Mon          18  2013-09-09 18:18:55               523   \n",
       "1    15230     Thu          18  2013-09-12 18:38:53               257   \n",
       "2    17942     Wed          19  2013-09-18 19:44:04               479   \n",
       "3    19683     Sat          11  2013-09-28 11:54:37               527   \n",
       "4    18024     Sat          18  2013-09-07 18:08:22               521   \n",
       "\n",
       "        start_station_name  start_station_latitude  start_station_longitude  \\\n",
       "0          W 38 St & 8 Ave               40.754666               -73.991382   \n",
       "1  Lispenard St & Broadway               40.719392               -74.002472   \n",
       "2          9 Ave & W 45 St               40.760193               -73.991255   \n",
       "3          E 33 St & 1 Ave               40.743156               -73.974347   \n",
       "4          8 Ave & W 31 St               40.750450               -73.994811   \n",
       "\n",
       "              end_time  end_station_id  ... end_year  end_month  end_week  \\\n",
       "0  2013-09-09 18:35:28             334  ...     2013          9        37   \n",
       "1  2013-09-12 18:48:34             236  ...     2013          9        37   \n",
       "2  2013-09-18 19:50:05             513  ...     2013          9        38   \n",
       "3  2013-09-28 12:03:58             441  ...     2013          9        39   \n",
       "4  2013-09-07 18:46:38             476  ...     2013          9        36   \n",
       "\n",
       "   end_day end_hour  days_category    peak_hours avg_trip_duration_each_hour  \\\n",
       "0        9       18       Weekdays    Peak hours                        14.1   \n",
       "1       12       18       Weekdays    Peak hours                        14.1   \n",
       "2       18       19       Weekdays    Peak hours                        13.2   \n",
       "3       28       12        Weekend  Normal hours                        14.0   \n",
       "4        7       18        Weekend    Peak hours                        14.1   \n",
       "\n",
       "   day_of_week  hours_category  \n",
       "0            2     16pm - 23pm  \n",
       "1            5     16pm - 23pm  \n",
       "2            4     16pm - 23pm  \n",
       "3            7      6am - 15pm  \n",
       "4            7     16pm - 23pm  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "d3a7753d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x16c1b4990>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABm8AAAHqCAYAAADietr8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACO0klEQVR4nOzdd3gU1f7H8c+k9wQSqiaE3ksAEaQrUiyIBWxXQCwoClJEg9IEkRVEELx2FNtPxStwUVFAkKI0EaL0XkQQkJJAgJTd8/uDy2oMCcmyyW6S9+t59rmZmXNmPpPkepZ895yxjDFGAAAAAAAAAAAA8Ao+ng4AAAAAAAAAAACAv1C8AQAAAAAAAAAA8CIUbwAAAAAAAAAAALwIxRsAAAAAAAAAAAAvQvEGAAAAAAAAAADAi1C8AQAAAAAAAAAA8CIUbwAAAAAAAAAAALwIxRsAAAAAAAAAAAAvQvEGAAAAAAAAAADAi1C8QZHWrl07DRw40NMxAAAosRiLAQDwLMZiAACKJ4o3QBHUu3dvdevWzdMxPG7ZsmW6+eabVbFiRVmWpTlz5ly03ZYtW9S1a1dFRkYqPDxczZs31/79+ws3bB4dP35c/fv3V82aNRUSEqK4uDgNGDBAycnJWdp17dpVcXFxCgoKUoUKFXTffffp4MGDHkoNACUPY/Fffv/9d/3rX/9SdHS0QkJC1KhRI/3888+ejpWjcePG6ZprrlFISIiioqIu2sayrGyvN954o3CDAgByxVj8l9dee02VK1dWUFCQmjRpouXLl3s6Uq7i4+OzjbOJiYmejgUAXofiDeCC9PR0T0fwGsYYZWZmeuTaqampatiwoV599dUc2+zatUutWrVSrVq1tGTJEv3yyy8aMWKEgoKCCjFp3h08eFAHDx7USy+9pA0bNmjGjBn69ttv9cADD2Rp1759e82cOVPbtm3TF198oV27dumOO+7wUGoAKHyMxX/x5Fh84sQJtWzZUv7+/vrmm2+0efNmTZo0KceiiDdIT09X9+7d9eijj+ba7r333tOhQ4ecr169ehVSQgAoGhiL/+LJsfizzz7TwIED9eyzz2r9+vVq3bq1unTp4rUfWLxgzJgxWcbZ4cOHezoSAHgfAxRhbdu2Nf379zdDhw41pUqVMuXKlTOjRo3K0mbfvn2ma9euJjQ01ISHh5vu3bubP/74w3m8V69e5pZbbsnS54knnjBt27bNcp3HHnvMDBo0yERHR5s2bdoYY4wZNWqUiY2NNQEBAaZChQqmf//+ecp97tw5M3ToUHPllVeagIAAU61aNfPOO+8YY4zJzMw0ffr0MfHx8SYoKMjUqFHDTJkyxdl31KhRRlKW1/fff2+MMebAgQOmR48eJioqypQuXdp07drV7Nmzx9k3IyPD9O/f30RGRprSpUubp556yvTs2TPL/Z87d87079/flClTxgQGBpqWLVuaNWvWOI9///33RpL59ttvTZMmTYy/v7959913jWVZ5qeffspyn1OnTjVxcXHG4XDk6ftyOSSZ2bNnZ9t/5513mn/961+X7Pvaa6+Zzp07m6CgIBMfH29mzpzpPL5nzx4jyXz22WemVatWJigoyDRt2tRs27bNrFmzxjRp0sSEhoaaTp06mSNHjrj71szMmTNNQECAycjIyLHNf//7X2NZlklPTzfG/PVz+uqrr0yDBg1MYGCgadasmfn111+dfd577z0TGRlpvvzyS1OjRg0THBxsbr/9dnP69GkzY8YMU6lSJRMVFWUef/xxk5mZ6fb7AlA8MBaX7LH46aefNq1atcq1zYcffmiaNGliwsLCTLly5czdd99tDh8+fNH7adSokQkKCjLt27c3hw8fNvPmzTO1atUy4eHh5q677jKpqaluy35hHLyYnN5X/LPv7NmzTfXq1U1gYKDp0KGD2b9/v7PNqFGjTMOGDc306dNNbGysCQ0NNY888ojJzMw0L774oilXrpwpU6aMef755912TwBKJsbikj0WN2vWzDzyyCNZ9tWqVcskJiY6t71tLK5UqZKZPHlyjscv9fM35q/f2XHjxpmyZcuayMhIM3r0aJORkWGefPJJU6pUKXPFFVeY6dOnX3ZeAPAUijco0tq2bWsiIiLM6NGjzfbt2837779vLMsyCxYsMMYY43A4TEJCgmnVqpVZu3atWbVqlWncuHGWN6B5fZMaFhZmhg4darZu3Wq2bNliPv/8cxMREWHmzZtn9u3bZ1avXm3eeuutPOXu0aOHiY2NNbNmzTK7du0y3333nfn000+NMcakp6ebkSNHmjVr1pjdu3ebjz76yISEhJjPPvvMGGPMqVOnTI8ePUznzp3NoUOHzKFDh0xaWppJTU011atXN3369DG//vqr2bx5s7nnnntMzZo1TVpamjHGmOeff96ULl3azJo1y2zZssU88sgjJiIiIsv9DxgwwFSsWNHMmzfPbNq0yfTq1cuUKlXKHDt2zBjz15u6Bg0amAULFpidO3eaP//801x//fWmX79+We4zISHBjBw5MsfvQ9++fU1oaGiur3379uXpe3qxP7LY7XYTFhZmxowZYzp27GjKlCljmjVrlq2dJBMdHW3efvtts23bNjN8+HDj6+trNm/ebIz5q3hTq1Yt8+2335rNmzeb5s2bm8aNG5t27dqZH374waxbt85Uq1Yt25tmd3j77bdNTExMjsePHTtmevToYVq2bOncd+HnVLt2bbNgwQLz66+/mptuusnEx8c7Czzvvfee8ff3N9dff71Zt26dWbp0qYmOjjYdO3Y0PXr0MJs2bTJffvmlCQgIcP5+AsA/MRaX7LG4du3aZuDAgeaOO+4wZcqUMY0aNcr2M5g+fbqZN2+e2bVrl1m5cqVp3ry56dKli/P4hftp3rx5ljG1bdu2pmPHjmbdunVm2bJlJjo62thstjz8dPPmUsWbK664wkRHR5umTZua119/3djt9ix9/f39TdOmTc2KFSvM2rVrTbNmzcw111zjbDNq1CgTFhZm7rjjDrNp0yYzd+5cExAQYDp16mT69+9vtm7dat59910jyaxcudJt9wWg5GEsLrljcVpamvH19TWzZs3Ksn/AgAHO4pox3jcWV6pUyZQvX96ULl3aNGzY0Dz//PPOn48xl/75G3P+dzY8PNw89thjZuvWrWb69OlGkunUqZMZN26c2b59uxk7dqzx9/fP8uEKAChKKN6gSGvbtm22T3teddVV5umnnzbGGLNgwQLj6+ubZaDetGmTkeT81Exe36Q2atQoS5tJkyaZGjVqOP8Qnlfbtm0zkszChQvz3Kdfv37m9ttvd25fLPP06dNNzZo1s3yaJy0tzQQHB5v58+cbY4wpV66cmThxovN4ZmamiYuLc57r9OnTxt/f33z88cfONunp6aZixYpmwoQJxpi/3tTNmTMny/U/++wzU6pUKXPu3DljjDFJSUnGsqwsn3D6p8OHD5sdO3bk+spttsnfXax4c+jQISPJhISEmJdfftmsX7/ejB8/3liWZZYsWZKl7z+LLldffbV59NFHjTF/FW8ufArMGGM++eQTI8ksWrTIuW/8+PGmZs2aecqbV3/++aeJi4szzz77bLZj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Dz74QC1atNBHH32kjRs3XvIP9zNmzJDdbtfVV1+tkJAQffjhhwoODr7kH+jj4+PVq1cv9enTR1OnTlXDhg21b98+HTlyRD169FC1atX0wQcfaP78+apcubI+/PBD/fTTT6pcuXKWc8yfP1/btm1TdHS0IiMjde+992rixIm65ZZbNGbMGF155ZXav3+/Zs2apaFDh+rKK69U//79NX78eFWrVk21atXStGnTdOLECeenh0JDQ/Xoo49q6NChKl26tOLi4jRhwgSdOXNGDzzwwCW/37Vr11bz5s319NNPq0+fPpf8NFXZsmVVtmzZS543J6dPn9bOnTud23v27FFSUpIzu3R+abE777xTbdq0Ufv27fXtt9/qyy+/1JIlS7Kc6/PPP1fTpk3VqlUrffzxx1qzZo2mT5/ucjZXnTp1Sh07dtSZM2f00UcfKSUlRSkpKZLO/4PK19dXa9as0Zo1a9SqVSuVKlVKu3fv1siRI1W1atVss27GjBmj6OholStXTs8++6xiYmLUrVu3Qr8vACUXY3HxHosHDRqka665Ri+88IJ69OihNWvW6K233tJbb70lSYqLi1NAQICmTZumRx55RBs3btTYsWNdvp477N+/X8ePH9f+/ftlt9udnxKuVq2awsLC9OWXX+qPP/5QixYtFBwcrO+//17PPvusHn74YQUGBjrP4+/vr/79+2vq1Kny9/fX448/rubNm2dZigcAvAFjcfEeiwcPHqz77rtPTZs2VYsWLfTWW29p//79zmXLvG0sXrlypVatWqX27dsrMjJSP/30kwYNGqSuXbs6/x2fl58/AJQEPPMGxZplWZozZ45KlSqlNm3aqEOHDqpSpYo+++wzZ5tOnTppxIgReuqpp3TVVVfp1KlTWWZg5CQqKkpvv/22WrZsqQYNGmjRokX68ssvFR0dfcm+r7/+uu644w7169dPtWrV0kMPPaTU1FRJ56dM33bbbbrzzjt19dVX69ixY1k+bSJJDz30kGrWrOlc//XHH39USEiIli1bpri4ON12222qXbu2+vTpo7Nnzzo/cfT000/r7rvvVs+ePdWiRQuFhYWpU6dOWWZ22Gw23X777brvvvvUuHFj7dy5U/Pnz1epUqXy9D1/4IEHlJ6erj59+uSp/eVYu3atEhISnP+gGDx4sBISEjRy5Ehnm1tvvVVvvPGGJkyYoPr1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qlu3rgIDAxUfH69JkyZlOR4fH68XXnhBffr0UXh4uOLi4vTWW2/let2vvvpKrVq10tChQ1WzZk3VqFFD3bp107Rp05xtevfurW7dumXpN3DgQLVr1y7LvszMTD3++OOKiopSdHS0hg8frr8/+eW1115T9erVFRQUpHLlyumOO+5wHnM4HHrxxRdVrVo1BQYGKi4uTuPGjZMk7d27V5ZlaebMmWrXrp2CgoL00UcfacaMGYqKisp2T2+++aZiY2MVEhKi7t27O5dVu+C9995T7dq1FRQUpFq1aum1115zHsvpWvnlUvGmbdu2WV6tW7dWrVq15Ofn0kQeAAAAAAAAAACKvs1zpZk9pZSDWfenHDq/vwALOL6+vnrhhRc0bdo0HThwINvxn3/+WT169NBdd92lDRs2aPTo0RoxYoRmzJiRpd2kSZPUtGlTrV+/Xv369dOjjz6qrVu35njd8uXLa9OmTdq4ceNl38P7778vPz8/rV69WlOnTtXkyZP1zjvvSJLWrl2rAQMGaMyYMdq2bZu+/fZbtWnTxtl32LBhevHFFzVixAht3rxZ//d//6dy5cplOf/TTz+tAQMGaMuWLerUqdNFM+zcuVMzZ87Ul19+qW+//VZJSUl67LHHnMfffvttPfvssxo3bpy2bNmiF154QSNGjND777+f72vlJs/Vlrlz8/5L1bVr13wHAQAAAAAAAACgyHLYpW+flmQuctBIsqRvE6VaNxbYEmq33nqrGjVqpFGjRmn69OlZjr388su67rrrNGLECElSjRo1tHnzZk2cOFG9e/d2trvhhhvUr18/SecLEJMnT9aSJUtUq1ati16zf//+Wr58uerXr69KlSqpefPm6tixo+69914FBgbmK39sbKwmT54sy7JUs2ZNbdiwQZMnT9ZDDz2k/fv3KzQ0VDfddJPCw8NVqVIlJSQkSJJOnTqlV155Ra+++qp69eolSapatapatWqV5fwDBw7UbbfdlmuGc+fO6f3339eVV14pSZo2bZpuvPFGTZo0SeXLl9fYsWM1adIk53kqV66szZs3680333ReO6/Xyk2eizf/nNJkWVaW6Up/fwaO3W7P0zmXLVumiRMn6ueff9ahQ4c0e/Zs53UyMjI0fPhwzZs3T7t371ZkZKQ6dOggm82mihUr5jU2AAAAAAAAAAAFb9+K7DNusjBSyu/n21Vu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d2dcVuZ+efC13pU8271l1buXxmm3e+ld6+z2ruTZ7qV3C6N3Pdu77uS527307kW+1ruSZ7qX3rWG3rWO3qV3fbV33cnzxnPeitC77o7NF7sX8IQKv3izdOlSJSUlafz48dq2bZv++Mc/Kj4+vsgTf0nOnDmjli1bKiUlpVRjSk9P14gRI7Rx40alpaUpLy9PcXFxOnPmjK28yMhITZ06VVu2bNGWLVt0//33q1evXsX+53xJNm/erLlz56pFixa2MySpadOmOnz4cMFHVlaWrZzjx4+rffv28vf31yeffKL//ve/mj59um655RbLWZs3by40prS0NElSv379LGe9/PLLevPNN5WSkqIdO3Zo2rRpeuWVV/TGG29YzpKkP//5z0pLS9OiRYuUlZWluLg4xcbG6ueffy52v5Lm5rRp0zRjxgylpKRo8+bNCg8P1wMPPKBTp07Zyjtz5ozat2+vqVOnlviYiss6e/asMjIyNHHiRGVkZGjZsmXatWuXevbsaWtcDRs2VEpKirKysrR+/XrVqVNHcXFx+vXXXy1nXbJixQpt2rRJTqfT1mO8pFu3boXm3X/+8x9bWT/88IM6dOigRo0aae3atfr22281ceJEValSxXLWleM5fPiw5s+fL4fDoYceeshy1qhRo/Tpp59q8eLF2rFjh0aNGqW//vWvWrlypaUsY4x69+6tvXv3auXKldq2bZtcLpdiY2OLPEe6cz51d/67k+Xu3C8py8rcd2dcVuZ+WfPF3pU8271l0buSZ7qX3rXGbu9Knu1eevcyete9LCu9W1Kele6ldy/ypd6VPNe99K519K419C6966u9606eN57zVoTedXdsvta9gMeYCu4Pf/iDGTZsWKFtjRo1Ms8++2ypciWZ5cuXlyrjkqNHjxpJJj093SN5xhhz6623mn/+85+29j116pRp0KCBSUtLMx07djSJiYm2ciZNmmRatmxpa9+rjRs3znTo0MEjWVdLTEw09evXN/n5+Zb37d69uxkyZEihbX379jWPPfaY5ayzZ88aPz8/s2rVqkLbW7ZsacaPH+92ztVzMz8/34SHh5upU6cWbDt37pypWbOmefPNNy3nXWnfvn1Gktm2bZutsRXlm2++MZLMjz/+WOqskydPGknms88+s5X1008/mdtvv918//33xuVymZkzZxabc72shIQE06tXrxL3dSdrwIABtuaXOz+vXr16mfvvv99WVtOmTc3kyZMLbWvTpo2ZMGGCpaydO3caSeb7778v2JaXl2dCQkLMvHnzShzb1efT0sz/4s7NVue+O+d5d+e+O1nuzv2ycCP0rjGe797S9K4xnuleetcaT/WuMZ7tXnqX3nUny27vFpVXmu6ldy/yZu8aUzbdS++WjN61ht69iN4tPssXevd6eb7wnLci9K67ed7uXsBTKvQ7b3Jzc7V161bFxcUV2h4XF6cNGzZ4aVTXOnnypCQpJCSk1FkXLlzQkiVLdObMGbVt29ZWxogRI9S9e3fFxsaWejy7d++W0+lU3bp19fDDD2vv3r22cj766CPFxMSoX79+CgsLU+vWrTVv3rxSjy83N1eLFy/WkCFD5HA4LO/foUMHff7559q1a5ck6dtvv9X69ev14IMPWs7Ky8vThQsXrnlFSVBQkNavX28575J9+/bpyJEjhY6DwMBAdezY0aeOg0tOnjwph8Nh61VmV8rNzdXcuXNVs2ZNtWzZ0vL++fn5evzxxzVmzBg1bdq0VGORpLVr1yosLEwNGzbUk08+qaNHj9oa0+rVq9WwYUN17dpVYWFhuueee0p1SYtLfvnlF61evVpDhw61tX+HDh300Ucf6eeff5YxRl9++aV27dqlrl27WsrJycmRpELHgZ+fnwICAtw6Dq4+n5Zm/nvy3OxOlrtzv6Ss0s790rhRelfy3L+vJ3pX8lz30rvuK6velW6s7qV3ix/Tzd67Uum6l971bu9euv8boXvp3eLRu/SuVfSuNaXtXck3nvNWhN51J8/b3Qt4UoVevDl27JguXLig2rVrF9peu3ZtHTlyxEujKswYo9GjR6tDhw5q1qyZ7ZysrCxVr15dgYGBGjZsmJYvX64mTZpYzlmyZIkyMjL00ksv2R7LJffcc4/effddpaamat68eTpy5IjatWun3377zXLW3r17NWfOHDVo0ECpqakaNmyYnn76ab377rulGuOKFSt04sQJDR482Nb+48aN0yOPPKJGjRrJ399frVu3VlJSkh555BHLWcHBwWrbtq2ef/55HTp0SBcuXNDixYu1adMmHT582Nb4JBXMdV8+Di45d+6cnn32WQ0cOFA1atSwlbFq1SpVr15dVapU0cyZM5WWlqbbbrvNcs7LL7+sypUr6+mnn7Y1jivFx8frX//6l774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n/70J2VkZGjVqlW6cOFCwfEQEhKigIAAt7Nq1aqlF198UT179lRERIR+++03zZ49Wz/99JP69etn+TFe/YuFv7+/wsPDFR0dbSkrJCREycnJeuihhxQREaH9+/frueee02233aY+ffpYHteYMWM0YMAA3XfffercubM+/fRTffzxx1q7dq3lLEnKzs7W+++/r+nTp1+zv5Wsjh07asyYMQoKCpLL5VJ6erreffddzZgxw3LW+++/r9DQUEVFRSkrK0uJiYnq3bv3NX+IVyr5fOpwONye/+6cm92d+yVl5eXluT33S8o6c+aMpblf1nyxdyXPdq+nelfybPfSu9bZ7V3Js91L79K7VrOs9K47ee52L73re70rea576V1692r0Lr1bUtbN0rvu5HnjOW9F6F138nyxewGPKad3+Pi0f/zjH8blcpmAgADTpk0bk56ebivnyy+/NJKu+UhISLCUU1SGJLNgwQJb4xoyZEjB4wsNDTVdunQxa9assZV1tY4dO5rExERb+w4YMMBEREQYf39/43Q6Td++fc327dttj+Xjjz82zZo1M4GBgaZRo0Zm7ty5trNSU1ONJLNz507bGcYYk52dbRITE01UVJSpUqWKqVevnhk/frzJycmxlbd06VJTr149ExAQYMLDw82IESPMiRMnStyvpLmZn59vJk2aZMLDw01gYKC57777TFZWlu28BQsWFPn9SZMmWcq69Fbcoj6+/PJLS1m///676dOnj3E6nSYgIMBERESYnj17mm+++cbWY7yay+UyM2fOtJx19uxZExcXZ0JDQ42/v7+JiooyCQkJ5sCBA7bH9fbbb5s777zTVKlSxbRs2fK6l0JwJ+utt94yQUFBJc6zkrIOHz5sBg8ebJxOp6lSpYqJjo4206dPN/n5+ZazZs2aZSIjIwt+XhMmTLjuMeXO+dTd+e9Olrtzv6QsK3O/pCyrc788+FrvGuPZ7i3L3jXGfvfSu9bZ7V1jPNu99O616F3P9a47ee52L73rm71rjGe6l961ht61jt6ld321d93J88Zz3orQu+7k+Wr3Ap7gMMYYAQAAAAAAAAAAwCdU6L95AwAAAAAAAAAA4GtYvAEAAAAAAAAAAPAhLN4AAAAAAAAAAAD4EBZvAAAAAAAAAAAAfAiLNwAAAAAAAAAAAD6ExRsAAAAAAAAAAAAfwuINAAAAAAAA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",
      "text/plain": [
       "<Figure size 1656.38x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(\n",
    "    data = df, x = 'start_hour',  y = 'avg_trip_duration_each_hour', col = 'hours_category', hue = 'subscriber' , aspect = 1, s = 50\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288c7d8c",
   "metadata": {},
   "source": [
    "#### Observation:\n",
    "The above results are interesting because non-subscribers dominate the late hours of 0am and 1am"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1119d5c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sub_a = df.loc[df['start_hour'].isin ([0, 1, 2, 3, 4, 5])]\n",
    "df_sub_b = df.loc[df['start_hour'].isin ([6, 7, 8, 9, 10, 11, 12, 13, 14, 15])]\n",
    "df_sub_c = df.loc[df['start_hour'].isin ([16, 17, 18, 19, 20, 21, 22, 23])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7ccd3d40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(46673, 33)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ff401e60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 33)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sub_a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "62485591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(23794, 33)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sub_b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "8f8357d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21541, 33)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sub_c.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a615d15",
   "metadata": {},
   "source": [
    "a + b + c\n",
    "\n",
    "1338 + 23794 + 21541 = 46673"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "5748bdad",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5424d0b8",
   "metadata": {},
   "source": [
    "#### df_sub_a (between 0am and 5am)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "2b632150",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape the variables into NumPy arrays and put them into separate objects\n",
    "Xa = df_sub_a['start_hour'].values.reshape(-1,1)\n",
    "ya = df_sub_a['avg_trip_duration_each_hour'].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ffe81413",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2],\n",
       "       [0],\n",
       "       [1],\n",
       "       ...,\n",
       "       [0],\n",
       "       [0],\n",
       "       [0]])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "4a9606bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12.2],\n",
       "       [13.1],\n",
       "       [13.1],\n",
       "       ...,\n",
       "       [13.1],\n",
       "       [13.1],\n",
       "       [13.1]])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ya"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "2ee0c47e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into a training set and a test set\n",
    "\n",
    "Xa_train, Xa_test, ya_train, ya_test = train_test_split(Xa, ya, test_size = 0.3, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "78fa5794",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Regression analysis\n",
    "# Create a regression object\n",
    "\n",
    "regression = LinearRegression()  # This is the regression object, which will be fit onto the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "a36dc1d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the regression object onto the training set\n",
    "\n",
    "regression.fit(Xa_train, ya_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d155fb63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the values of y using X\n",
    "\n",
    "ya_predicted = regression.predict(Xa_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "28878b48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a plot that shows the regression line from the model on the test set.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xa_test, ya_test, color = 'gray', s = 15)\n",
    "plot_test.plot(Xa_test, ya_predicted, color = 'red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Test set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "74bc42d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create objects that contain the model summary statistics.\n",
    "\n",
    "rmse_a = mean_squared_error(ya_test, ya_predicted) # This is the mean squared error\n",
    "r2_a = r2_score(ya_test, ya_predicted) # This is the R2 score. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "3541d984",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[-0.55857097]]\n",
      "Mean squared error:  0.07411012407060004\n",
      "R2 score:  0.9297626773400101\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary statistics. This is where you evaluate the performance of the model.\n",
    "\n",
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_a)\n",
    "print('R2 score: ', r2_a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2eec5180",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [11.06153189],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [11.62010286],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [11.62010286],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.17867383],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [11.06153189],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [11.06153189],\n",
       "       [10.50296093],\n",
       "       [11.06153189],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [11.06153189],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [13.29581577],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [11.06153189],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [12.7372448 ],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [11.62010286],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.17867383],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [10.50296093],\n",
       "       [10.50296093],\n",
       "       [12.7372448 ],\n",
       "       [12.7372448 ],\n",
       "       [12.17867383],\n",
       "       [11.06153189],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [10.50296093],\n",
       "       [11.62010286],\n",
       "       [12.7372448 ],\n",
       "       [13.29581577],\n",
       "       [13.29581577],\n",
       "       [12.17867383],\n",
       "       [11.62010286],\n",
       "       [12.17867383]])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ya_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "4311927e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>11.6</td>\n",
       "      <td>11.620103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12.2</td>\n",
       "      <td>12.178674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10.2</td>\n",
       "      <td>10.502961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>10.2</td>\n",
       "      <td>10.502961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>11.6</td>\n",
       "      <td>11.620103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>11.6</td>\n",
       "      <td>11.061532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>12.2</td>\n",
       "      <td>12.178674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>10.2</td>\n",
       "      <td>10.502961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>13.1</td>\n",
       "      <td>13.295816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>13.1</td>\n",
       "      <td>12.737245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>11.6</td>\n",
       "      <td>11.620103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>10.2</td>\n",
       "      <td>10.502961</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Actual  Predicted\n",
       "0     13.1  12.737245\n",
       "1     13.1  13.295816\n",
       "2     13.1  12.737245\n",
       "3     13.1  12.737245\n",
       "4     13.1  12.737245\n",
       "5     13.1  13.295816\n",
       "6     13.1  13.295816\n",
       "7     11.6  11.620103\n",
       "8     13.1  12.737245\n",
       "9     12.2  12.178674\n",
       "10    10.2  10.502961\n",
       "11    13.1  13.295816\n",
       "12    13.1  12.737245\n",
       "13    13.1  13.295816\n",
       "14    10.2  10.502961\n",
       "15    13.1  12.737245\n",
       "16    13.1  13.295816\n",
       "17    11.6  11.620103\n",
       "18    13.1  13.295816\n",
       "19    11.6  11.061532\n",
       "20    13.1  13.295816\n",
       "21    12.2  12.178674\n",
       "22    13.1  13.295816\n",
       "23    13.1  13.295816\n",
       "24    10.2  10.502961\n",
       "25    13.1  13.295816\n",
       "26    13.1  12.737245\n",
       "27    13.1  12.737245\n",
       "28    11.6  11.620103\n",
       "29    10.2  10.502961"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe comparing the actual and predicted values of y\n",
    "\n",
    "df_a_ap = pd.DataFrame({'Actual': ya_test.flatten(), 'Predicted': ya_predicted.flatten()})\n",
    "df_a_ap.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f1c348d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare how the regression fits the training set\n",
    "# Predict\n",
    "\n",
    "ya_predicted_train = regression.predict(Xa_train) # This is predicting X_train!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "ccbb8563",
   "metadata": {},
   "outputs": [],
   "source": [
    "rmse_a = mean_squared_error(ya_train, ya_predicted_train)\n",
    "r2_a = r2_score(ya_train, ya_predicted_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "95310291",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[-0.55857097]]\n",
      "Mean squared error:  0.0751069252654511\n",
      "R2 score:  0.9306410061231679\n"
     ]
    }
   ],
   "source": [
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_a)\n",
    "print('R2 score: ', r2_a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "a30e4d2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the training set results.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xa_train, ya_train, color='green', s = 15)\n",
    "plot_test.plot(Xa_train, ya_predicted_train, color='red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Train set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daaefca5",
   "metadata": {},
   "source": [
    "#### df_sub_b (between 5am and 15pm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "5d542da6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape the variables into NumPy arrays and put them into separate objects\n",
    "Xb = df_sub_b['start_hour'].values.reshape(-1,1)\n",
    "yb = df_sub_b['avg_trip_duration_each_hour'].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "c77820f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11],\n",
       "       [10],\n",
       "       [12],\n",
       "       ...,\n",
       "       [ 8],\n",
       "       [15],\n",
       "       [13]])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e15468a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14. ],\n",
       "       [13.4],\n",
       "       [13.5],\n",
       "       ...,\n",
       "       [12.5],\n",
       "       [14.5],\n",
       "       [13.7]])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "4b5d06fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into a training set and a test set\n",
    "\n",
    "Xb_train, Xb_test, yb_train, yb_test = train_test_split(Xb, yb, test_size = 0.3, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "c8a6c2f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the regression object onto the training set\n",
    "\n",
    "regression.fit(Xb_train, yb_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "38227e29",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the values of y using X\n",
    "\n",
    "yb_predicted = regression.predict(Xb_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "11e5d1a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a plot that shows the regression line from the model on the test set.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xb_test, yb_test, color = 'gray', s = 15)\n",
    "plot_test.plot(Xb_test, yb_predicted, color = 'red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Test set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "b58d3082",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create objects that contain the model summary statistics.\n",
    "\n",
    "rmse_b = mean_squared_error(yb_test, yb_predicted) # This is the mean squared error\n",
    "r2_b = r2_score(yb_test, yb_predicted) # This is the R2 score. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "5cfe0047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[0.34853688]]\n",
      "Mean squared error:  0.13821119773370932\n",
      "R2 score:  0.8673754445802933\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary statistics. This is where you evaluate the performance of the model.\n",
    "\n",
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_b)\n",
    "print('R2 score: ', r2_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4eaa3c93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12.58494243],\n",
       "       [13.97908995],\n",
       "       [12.23640555],\n",
       "       ...,\n",
       "       [12.58494243],\n",
       "       [12.23640555],\n",
       "       [12.93347931]])"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yb_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "dab17f6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.3</td>\n",
       "      <td>12.584942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.7</td>\n",
       "      <td>13.979090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12.3</td>\n",
       "      <td>12.584942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.5</td>\n",
       "      <td>13.630553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14.5</td>\n",
       "      <td>14.676164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14.0</td>\n",
       "      <td>13.282016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>13.4</td>\n",
       "      <td>12.933479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14.4</td>\n",
       "      <td>14.327627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14.5</td>\n",
       "      <td>14.676164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13.5</td>\n",
       "      <td>13.630553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>11.8</td>\n",
       "      <td>11.887869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>14.4</td>\n",
       "      <td>14.327627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>13.7</td>\n",
       "      <td>13.979090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>13.5</td>\n",
       "      <td>13.630553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>14.4</td>\n",
       "      <td>14.327627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>14.4</td>\n",
       "      <td>14.327627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>11.8</td>\n",
       "      <td>11.887869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.5</td>\n",
       "      <td>14.676164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>11.8</td>\n",
       "      <td>11.887869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>12.5</td>\n",
       "      <td>12.236406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>13.7</td>\n",
       "      <td>13.979090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>13.7</td>\n",
       "      <td>13.979090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>14.4</td>\n",
       "      <td>14.327627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Actual  Predicted\n",
       "0     12.3  12.584942\n",
       "1     13.7  13.979090\n",
       "2     12.5  12.236406\n",
       "3     12.3  12.584942\n",
       "4     13.5  13.630553\n",
       "5     12.5  12.236406\n",
       "6     12.5  12.236406\n",
       "7     14.5  14.676164\n",
       "8     14.0  13.282016\n",
       "9     12.5  12.236406\n",
       "10    13.4  12.933479\n",
       "11    14.4  14.327627\n",
       "12    14.5  14.676164\n",
       "13    13.5  13.630553\n",
       "14    12.5  12.236406\n",
       "15    11.8  11.887869\n",
       "16    14.4  14.327627\n",
       "17    12.5  12.236406\n",
       "18    13.7  13.979090\n",
       "19    13.5  13.630553\n",
       "20    14.4  14.327627\n",
       "21    14.4  14.327627\n",
       "22    11.8  11.887869\n",
       "23    12.5  12.236406\n",
       "24    14.5  14.676164\n",
       "25    11.8  11.887869\n",
       "26    12.5  12.236406\n",
       "27    13.7  13.979090\n",
       "28    13.7  13.979090\n",
       "29    14.4  14.327627"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe comparing the actual and predicted values of y\n",
    "\n",
    "df_b_ap = pd.DataFrame({'Actual': yb_test.flatten(), 'Predicted': yb_predicted.flatten()})\n",
    "df_b_ap.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "3debf62c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare how the regression fits the training set\n",
    "# Predict\n",
    "\n",
    "yb_predicted_train = regression.predict(Xb_train) # This is predicting X_train!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "92f2ae5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "rmse_b = mean_squared_error(yb_train, yb_predicted_train)\n",
    "r2_b = r2_score(yb_train, yb_predicted_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "0986e9f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[0.34853688]]\n",
      "Mean squared error:  0.13644359976542164\n",
      "R2 score:  0.8698383653285413\n"
     ]
    }
   ],
   "source": [
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_b)\n",
    "print('R2 score: ', r2_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "1ccf8766",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAHFCAYAAAAHcXhbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABW20lEQVR4nO3dd1hTZ/8G8DussBQBRUQZ7gmKr6to3UodOKpVa5206qtvX6xaZ1W0tg58XdWqdbfaWm1FHG3du05U6qJOcOFWkKHIeH5/5EdqGEkO5CQE7s91cV3m5JvkS4a5ec5znqMQQggQERERmSkLUzdAREREVBAMM0RERGTWGGaIiIjIrDHMEBERkVljmCEiIiKzxjBDREREZo1hhoiIiMwawwwRERGZNYYZIiIiMmsMM3k4deoUunfvDi8vLyiVSpQtWxbvvPMOxowZo1G3dOlSrFu3TpYeUlJSMG3aNBw6dEiv+kOHDkGhUODXX3+VpR9z9fTpUyiVSigUCkRGRpq6nULl+PHjmDZtGuLj4yXdzsfHB4MGDZKlp7etW7cOCoUCsbGxsj9WbuLi4jBt2jRERUXluG7atGlQKBTGbwrGe/71FRsbC4VCIdv/hVny+341pODgYLz33nsAgJYtW0KhUOj8mTZtWoEeM+v/dn2/C4wtr+/Ba9euwcbGBufOnZO/CUE57Ny5U1hYWIjWrVuLjRs3ikOHDomNGzeKMWPGiPLly2vU1q5dW7Ro0UKWPp48eSIAiNDQUL3qDx48KACIX375RZZ+zNX8+fMFAAFA/Pvf/zZ1O4XK3LlzBQARExMj6Xbnzp0TN27ckKept6xduzZf/RnKmTNnBACxdu3aHNfdvXtXnDhxwvhNCeM9//p6/fq1OHHihHj8+LGsj5Pf96uhnDt3TlhYWIgzZ84IIYS4fPmyOHHihPpn8uTJ6vfL29vv3r1boMdNSEgQJ06cEAkJCYb4NQxO2/fgoEGDRPPmzWXvwUr+uGR+wsLCULFiRezevRtWVv88RX369EFYWJjsjy+EwOvXr2V/HLllZGQgPT0dSqXSpH2sWbMGbm5u8Pb2xsaNGzF//nzY2dkZtYeUlBTY29sb9THl8OrVK9jZ2cHf39/UreTLq1evYGtra5ARlQoVKqBChQoG6Eq6wvb8K5VKNGnSxNRtyG727Nlo1KgRGjRoAACoVauWxvV///03AKBOnTrqmtxI/f+gZMmSZvv8fvrpp2jQoAGOHz+OgIAA+R5I9rhkhmrXri0aN26ss87b21v9F3/Wj7e3txBCiFevXonRo0eLunXripIlSwpnZ2fRpEkTERERkeN+AIj//Oc/YtmyZaJGjRrC2tpaLFu2LMd9AxADBw7Ms5+skZmffvpJTJo0SZQrV06UKFFCtGnTRvz999856levXi38/PyEUqkUzs7Oolu3buLKlSsaNS1atMg1cQ8cOFD9uwohRExMjAAg5syZI2bMmCF8fHyEpaWl+OOPP3LttV69eqJZs2Y5tqenpwsPDw/RvXt39balS5cKPz8/4eDgIBwdHUX16tXFxIkT83we3nby5EkBQIwZM0asWLFCABDr169XXz9y5Ehhb2+f6188vXr1Em5ubuLNmzfqbT///LNo0qSJsLe3Fw4ODqJ9+/bi3LlzOZ4bBwcHceHCBdGuXTvh6OgomjRpIoQQYs+ePaJLly6ifPnyQqlUisqVK4uhQ4eKJ0+e5Hj8iIgI4evrK2xsbETFihXFwoULRWhoqMj+sc3MzBTffvutqFu3rrC1tRWlSpUSPXr0EDdv3tT63GTdV/afgwcPCiFU7+9OnTqJLVu2iHr16gmlUinGjx+vvu7t92LWe2/9+vVi1KhRomzZssLW1lY0b948x/OTlxMnToiAgAChVCpFuXLlxIQJE9Sv2dt/iSOP0crsPWWN6uzevVsMHjxYlC5dWgAQr169EtevXxeDBg0SVapUEXZ2dsLDw0N07txZXLhwIcfvlP0n67Fzey0yMjLEnDlzRPXq1YWNjY0oU6aM6N+/f46/zFu0aCFq164tTp8+LZo1aybs7OxExYoVxaxZs0RGRobO5yqv51/fz352Wb/LX3/9JXr27Kn+P2vUqFEiLS1N/P333yIwMFA4OjoKb29vMWfOHI3bZ33+3x7ByrrPS5cuiT59+oiSJUsKNzc3MXjwYBEfH6/1tllye77zer8Kod/n8+bNm6J3796iXLlywsbGRri5uYnWrVuL8+fPa32OHj58KKytrcW3336bZ03Wey5r5Obtvs+ePSt69OghSpUqJdzd3YUQqpG/3r17C29vb2Frayu8vb1Fnz59RGxsrMb9Zr2+b/+uWf/PXL9+XXTo0EE4ODiIChUqiNGjR4vXr19r/V2EEGL//v2iRYsWwsXFRdja2gpPT0/x/vvvi+TkZHVNamqqmDFjhvr9XLp0aTFo0CCNETht34NZatasKfr376+zp4LgnJlcvPPOOzh16hRCQkJw6tQppKWl5Vq3detWVKpUCf7+/jhx4gROnDiBrVu3AgBSU1Px/PlzfP7554iIiMDGjRvRrFkzvP/++/jhhx9y3FdERASWLVuGqVOnYvfu3XjnnXewa9cuAMDHH3+svv8pU6bo7H/SpEm4ffs2Vq1ahRUrVuD69esICgpCRkaGumbWrFn4+OOPUbt2bYSHh2PRokW4cOEC3nnnHVy/fj0/TxsA4JtvvsGBAwfwv//9D3/88Qdq1KiRa93gwYNx7NixHI+1Z88exMXFYfDgwQCAn3/+GSNGjECLFi2wdetWREREYNSoUUhOTtarn9WrVwNQ7efu06cP7O3t1duytqekpGDz5s0at4uPj8e2bdvQr18/WFtbAwBmzpyJDz/8ELVq1cLmzZuxfv16JCYm4t1338WVK1c0bv/mzRt06dIFrVu3xrZt2zB9+nQAwM2bN/HOO+9g2bJl2LNnD6ZOnYpTp06hWbNmGu+zXbt24f3334erqys2bdqEsLAwbNy4Ed9//32O33HYsGH47LPP0LZtW0RERGDp0qW4fPkyAgIC8OjRozyfm08++QT//e9/AQDh4eHq91j9+vXVNefOncPYsWMREhKCXbt2oUePHlqf70mTJuHWrVtYtWoVVq1ahbi4OLRs2RK3bt3SersrV66gTZs2iI+Px7p167B8+XKcP38eX331ldbb6SM4OBjW1tZYv349fv31V1hbWyMuLg6urq6YPXs2du3ahW+//RZWVlZo3Lgxrl69CgCoX78+1q5dCwCYPHmy+vn55JNP8nys4cOHY/z48WjXrh22b9+OGTNmYNeuXQgICMDTp081ah8+fIiPPvoI/fr1w/bt29GhQwdMnDgRGzZsyPfvqs9nX5tevXqhbt262LJlC4YMGYIFCxZg1KhR6NatGzp16oStW7eidevWGD9+PMLDw/W6zx49eqBatWrYsmULJkyYgJ9++gmjRo2S/Lvper/q+/ns2LEjzp49i7CwMOzduxfLli2Dv7+/znk4e/bsQVpaGlq1aiW5dwB4//33UaVKFfzyyy9Yvnw5ANVco+rVq2PhwoXYvXs35syZgwcPHqBhw4Y53i+5SUtLQ5cuXdCmTRts27YNwcHBWLBgAebMmaP1drGxsejUqRNsbGywZs0a7Nq1C7Nnz4aDgwPevHkDAMjMzETXrl0xe/Zs9O3bF7/99htmz56NvXv3omXLlnj16hUA7d+DWVq2bIk//vgDQoj8PHX6kTUqmamnT5+KZs2aqVOmtbW1CAgIELNmzRKJiYkatfrOmUlPTxdpaWni448/Fv7+/hrXARBOTk7i+fPnGtvzO2emY8eOGts3b94sAKj377948ULY2dnlqLtz545QKpWib9++6m1SR2YqV66sMZKRl6dPnwobGxsxadIkje29evUSZcuWFWlpaUIIIT799FNRqlQpnfeXm+TkZFGyZEn1qEhW3wqFQmO+Qf369UVAQIDGbZcuXSoAiIsXLwohVM+NlZWV+O9//6tRl5iYKNzd3UWvXr00HgOAWLNmjdb+MjMzRVpamrh9+7YAILZt26a+rmHDhsLT01OkpqZqPJarq6vGaMCJEycEADFv3jyN+757966ws7MT48aN09qDtjkI3t7ewtLSUly9ejXX63IbGahfv77IzMxUb4+NjRXW1tbik08+0dpH7969hZ2dnXj48KF6W3p6uqhRo0aBR2YGDBig9bGzHuvNmzeiatWqYtSoUert2ubMZB+ZiY6OFgDEiBEjNOpOnTolAGi811u0aCEAiFOnTmnU1qpVSwQGBursN6/nX9dnPy9Zv0v291G9evUEABEeHq7elpaWJsqUKSPef/999TZtIzNhYWEa9zlixAhha2urfp/oOzIjRN7vV30/n0+fPhUAxMKFC7U+H7kZPny4sLOz03h/Z6dtZGbq1Kk6HyM9PV0kJSUJBwcHsWjRIvX2vEZmAIjNmzdr3EfHjh1F9erVtT7Or7/+KgCIqKioPGs2btwoAIgtW7ZobM/6TCxdulS9Tdf34MqVKwUAER0drbWvguDITC5cXV1x9OhRnDlzBrNnz0bXrl1x7do1TJw4Eb6+vnolZgD45Zdf0LRpUzg6OsLKygrW1tZYvXo1oqOjc9S2bt0azs7OBum/S5cuGpf9/PwAALdv3wYAnDhxAq9evcpxNISnpydat26N/fv3F+ixs0YytHF1dUVQUBC+//57ZGZmAgBevHiBbdu2YcCAAeq5So0aNUJ8fDw+/PBDbNu2Te/nHgA2b96Mly9fIjg4WL0tODgYQgj1X9yAapTo+PHj6r/IAWDt2rVo2LAh6tSpAwDYvXs30tPTMWDAAKSnp6t/bG1t0aJFi1yPMshtFOPx48f497//DU9PT/V7wtvbGwDU74vk5GRERkaiW7dusLGxUd/W0dERQUFBGve3c+dOKBQK9OvXT6Mvd3d31K1bt8BHP/j5+aFatWp61/ft21djPoq3tzcCAgJw8OBBrbc7ePAg2rRpg7Jly6q3WVpaonfv3tKbzia31yE9PR0zZ85ErVq1YGNjAysrK9jY2OD69eu5fj71kfU7Zv9cNWrUCDVr1szxuXJ3d0ejRo00tvn5+ak/p/mh67OvS+fOnTUu16xZEwqFAh06dFBvs7KyQpUqVfS+z9x6ev36NR4/fqzX7fWh7+fTxcUFlStXxty5czF//nycP39e/f+PLnFxcShTpky+51vl9j5MSkrC+PHjUaVKFVhZWcHKygqOjo5ITk7W632oUChy/J+gz3uoXr16sLGxwdChQ/H999/nOnK6c+dOlCpVCkFBQRrPab169eDu7i7p/xY3NzcAwP379/W+jVQMM1o0aNAA48ePxy+//IK4uDiMGjUKsbGxek0CDg8PR69evVC+fHls2LABJ06cwJkzZxAcHJzr5N5y5coZrG9XV1eNy1kTcLOGBZ89e5bnY3p4eKivzw8pv0dwcDDu37+PvXv3AgA2btyI1NRUjS+D/v37Y82aNbh9+zZ69OgBNzc3NG7cWH0bbVavXg1bW1u89957iI+PR3x8PPz8/ODj44N169aph94/+ugjKJVK9aGFV65cwZkzZ9S7ugCod9c0bNgQ1tbWGj+bNm3KEbLs7e1RsmRJjW2ZmZlo3749wsPDMW7cOOzfvx+nT5/GyZMnAfzz+rx48QJCCI0v9izZtz169Ehdm72vkydPSgp/uZH6vnR3d891m6731LNnz/K8bUHl9juMHj0aU6ZMQbdu3bBjxw6cOnUKZ86cQd26ddWvg1RSP1fZP6eA6rOa38fP7T6zf/Z1cXFx0bhsY2MDe3t72Nra5tiu70EKBe1JH/p+PhUKBfbv34/AwECEhYWhfv36KFOmDEJCQpCYmKj1MbImj+dXbu+Lvn37YsmSJfjkk0+we/dunD59GmfOnEGZMmX0en5ye22USqXO16Zy5crYt28f3Nzc8J///AeVK1dG5cqVsWjRInXNo0ePEB8fDxsbmxzP6cOHDyX935LVoyFf8+x4NJOerK2tERoaigULFuDSpUs66zds2ICKFSti06ZNGkk+NTU113pjrleR9Z/LgwcPclwXFxeH0qVLqy/b2toiISEhR11eb2Qpv0dgYCA8PDywdu1aBAYGYu3atWjcuHGOIwQGDx6MwYMHIzk5GUeOHEFoaCg6d+6Ma9euqUc1srt27RqOHTsGAPDy8sq1Zvfu3ejYsSOcnZ3RtWtX/PDDD/jqq6+wdu1a2Nra4sMPP1TXZj0nv/76a56P+bbcnodLly7hr7/+wrp16zBw4ED19hs3bmjUOTs7Q6FQ5Drf5eHDhxqXS5cuDYVCgaNHj+Z61FhBjyST+r7M3l/Wtty+uN/m6uqa522zUyqVuX6O8gpMuf0OGzZswIABAzBz5kyN7U+fPkWpUqW09pqXtz9X2Y9yyv65on9kfdFlf02l/FEl5fPp7e2tnjd37do1bN68GdOmTcObN2/Uc1nyeoyCrJeS/X2YkJCAnTt3IjQ0FBMmTFBvz5pvKbd3330X7777LjIyMhAZGYnFixfjs88+Q9myZdGnTx+ULl0arq6u6rmb2ZUoUULvx8r6feT8DHBkJhe5fckD/+wG8PDwUG/L6y8phUIBGxsbjTfww4cPsW3bNr37kOMvGEA1wdnOzi7HRMN79+7hwIEDaNOmjXqbj48Prl27pvEfzbNnz3D8+PEC92FpaYn+/fsjIiICR48eRWRkpMYuoewcHBzQoUMHfPHFF3jz5g0uX76cZ23Wf1YrV67EwYMHNX5+//13WFtbY82aNer6wYMHIy4uDr///js2bNiA7t27a3ypBQYGwsrKCjdv3kSDBg1y/dEl672QPWB89913OX7PBg0aICIiQj0ZD1ANSe/cuVOjtnPnzhBC4P79+7n25Ovrq7UnQ7/HNm7cqDHJ7/bt2zh+/Dhatmyp9XatWrXC/v37NQJcRkYGNm3alKPWx8cHFy5c0Nh24MABJCUl6d2nQqHI8Tr89ttvOYbBpTw/rVu3BoAcn6szZ84gOjpa43NF/yhbtixsbW1zvKa5/V+Z1+uR389ntWrVMHnyZPj6+uoMKjVq1MCzZ89y/eMuPxQKBYQQOd6Hq1at0nvCtiFYWlqicePG+PbbbwFA/Tx07twZz549Q0ZGRq7PZ/Xq1dX3oWtE8datW7CwsNC4jaFxZCYXgYGBqFChAoKCglCjRg1kZmYiKioK8+bNg6OjI0aOHKmu9fX1xc8//4xNmzahUqVKsLW1ha+vLzp37ozw8HCMGDECPXv2xN27dzFjxgyUK1dO76OFSpQoAW9vb2zbtg1t2rSBi4sLSpcuDR8fnwL9fqVKlcKUKVMwadIkDBgwAB9++CGePXuG6dOnw9bWFqGhoera/v3747vvvkO/fv0wZMgQPHv2DGFhYTl2oeRXcHAw5syZg759+8LOzi7HHIkhQ4bAzs4OTZs2Rbly5fDw4UPMmjULTk5OaNiwYa73mZ6ejh9++AE1a9bM88iToKAgbN++HU+ePEGZMmXQvn17VKhQASNGjMDDhw81djEBqi/QL7/8El988QVu3bqF9957D87Oznj06BFOnz4NBwcH9RFLealRowYqV66MCRMmQAgBFxcX7NixI9ddZl9++SU6deqEwMBAjBw5EhkZGZg7dy4cHR01/mpr2rQphg4disGDByMyMhLNmzeHg4MDHjx4gGPHjsHX1xfDhw/Ps6essLNo0SIMHDgQ1tbWqF69uqS/ut72+PFjdO/eHUOGDEFCQgJCQ0Nha2uLiRMnar3d5MmTsX37drRu3RpTp06Fvb09vv3221yPWuvfvz+mTJmCqVOnokWLFrhy5QqWLFkCJycnvfvs3Lkz1q1bhxo1asDPzw9nz57F3Llzc4yoVK5cGXZ2dvjxxx9Rs2ZNODo6wsPDQ+MPmizVq1fH0KFDsXjxYlhYWKBDhw6IjY3FlClT4Onpma8jeIqDrDlfa9asQeXKlVG3bl2cPn0aP/30U47avN6v+n4+L1y4gE8//RQffPABqlatChsbGxw4cAAXLlzQGB3JTcuWLSGEwKlTp9C+ffsC/94lS5ZE8+bNMXfuXPX/64cPH8bq1avzPTqor+XLl+PAgQPo1KkTvLy88Pr1a/Ufd23btgWgWlftxx9/RMeOHTFy5Eg0atQI1tbWuHfvHg4ePIiuXbuie/fuAPL+Hsxy8uRJ1KtXz2DzQnMl29RiM7Zp0ybRt29fUbVqVeHo6Cisra2Fl5eX6N+/f451WGJjY0X79u1FiRIlchxfP3v2bOHj4yOUSqWoWbOmWLlyZa5rU+D/15nJzb59+4S/v79QKpV6rzOTfQXgvI4WWLVqlfDz8xM2NjbCyclJdO3aVVy+fDnH/X7//feiZs2awtbWVtSqVUts2rQpz6OZ5s6dm2d/eQkICBAAxEcffZTrY7dq1UqULVtW2NjYCA8PD9GrVy+N9UCyi4iI0HnEwq5du3IcvTFp0iQBQHh6eua51kdERIRo1aqVKFmypFAqlcLb21v07NlT7Nu3T12Ttf5Dbq5cuSLatWsnSpQoIZydncUHH3wg7ty5k+sROlu3blWvM+Pl5SVmz54tQkJChLOzc477XbNmjWjcuLFwcHAQdnZ2onLlymLAgAEiMjIyz+cgy8SJE4WHh4ewsLDIdZ2Z3GhbZyYkJESUKVNGKJVK8e677+rVgxBC/Pnnn6JJkyZCqVQKd3d3MXbs2FzXmUlNTRXjxo0Tnp6ews7OTrRo0UJERUXleTTT20eWZHnx4oX4+OOPhZubm7C3txfNmjUTR48ezfXovY0bN6rXf3r7ddK2zky1atWEtbW1KF26tOjXr1+e68xkl/1zlZe8nn99P/vZZf0u2dc7yuu9nL1/bUczZb/P3FZ1TkhIEJ988okoW7ascHBwEEFBQSI2NjbXz0Ve71chdH8+Hz16JAYNGiRq1KihXrfKz89PLFiwQKSnp2t9jjIyMoSPj0+Oo9Vy+91yO5opt7Wk7t27J3r06CGcnZ1FiRIlxHvvvScuXbqU5+ub2zoz2eX2vszuxIkTonv37sLb21solUrh6uoqWrRoIbZv365Rl5aWJv73v/+p17BydHQUNWrUEMOGDRPXr19X12n7HkxMTBT29vY5jpQzNIUQch74TUSGkpaWhnr16qF8+fLYs2ePqdvRcOjQIbRq1Qq//PILevbsaep2iGQxb948fP3117h//77RVxE3V6tXr8bIkSNx9+5dWUdmOGeGqJD6+OOP8fPPP+Pw4cPYtGkT2rdvj+joaIwbN87UrREVS//5z3/g5OSknl9C2qWnp2POnDmYOHGivLuYwDkzRIVWYmIiPv/8czx58gTW1taoX78+fv/9d/U+bSIyLltbW6xfvx7nz583dStm4e7du+jXrx/GjBkj+2NxNxMRERGZNe5mIiIiIrPGMENERERmjWGGiIiIzFqRnwCcmZmJuLg4lChRwqinDCAiIqL8E0IgMTERHh4esLDQPvZS5MNMXFwcPD09Td0GERER5cPdu3dzrM6dXZEPM1nLst+9e9dgS/ATERGRvF6+fAlPT0+9Tq9S5MNM1q6lkiVLMswQERGZGX2miHACMBEREZk1hhkiIiIyawwzREREZNYYZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1hhkiIiIyawwzREREZNYYZoiIiCh/UlKAUaOA2bNN2kaRP9EkERERGVhaGmBjo7mta1egZk2TtMORGSIiItJfYGDOIAMAtWoZv5f/xzBDREREui1eDCgUwJ49edfcvm28ft7C3UxERESUt9OngcaN9avz9pa/n1wwzBAREVFOz58Drq666ypUAO7cUY3amAjDDBEREf0jMxOwtwdSU3XXvnwJlCghf086cM4MERERqQweDFha6g4yFy4AQhSKIAMwzBAREdFPP6l2E61bp71uzRpViPH1NUpb+uJuJiIiouIqOlq/Q6p79wZ+/ln+fvKJYYaIiKi4SU4GHB31q01PV+16KsS4m4mIiKi4EAKoVk2/IPP4saq+kAcZgGGGiIioeJg4EbCwAK5f11539KgqxJQpY5y+DIBhhoiIqCjbtUs1uVfXySDDwlQhplkz4/RlQJwzQ0REVBTdvQt4eemue/dd4MgRyXevmJ5zkTwRKiTfjyEwzBARERUluZ3ROi+pqfrXviW3IJO13RSBhruZiIiIioo2bfQLJ7Gxql1K+QgyhRHDDBERkbmbP181L+bAAe11O3eqQoyJTggpF+5mIiIiMlcnTgABAbrrPv8cmDtX/n5MhGGGiIjI3Dx9qt+h05UqATdumPSM1sbA3UxERETmIjMTsLLSL8gkJgI3b8oSZPKa5MujmYiIiChv/fsDGzborrt0CahdW/Z2TBVccsMwQ0REZESS12f54Qdg4EDdd/zDD6rAUwxxNxMREZGRaFufJYfLl1W7iHQFmX79VEcoFdMgA3BkhoiIqHBJSgJKlNBdZ2WlWvTOguMSfAaIiIgKAyEAHx/9gszTp6qVfhlkADDMEBERmVzYHqiCye3b2guPH1eFHldXo/RlLribiYiIyEQ6XQV2btSjcP58YNQo2fsxVwwzRERERiJCBRTTFfCKB24v1OMGrVsD+/fL3JX5Y5ghIiIyljdvIKbpXwtrazm7KTI4Z4aIiMgY3n0XUCp11925o5oXwyCjN4YZIiIiOc2dq1ov5tgx7XV//KEKMZ6exumrCOFuJiIiIjkcO6YajdFlwgRg1iz5+ynCGGaIiIgM6ckTwM1Nd1316kB0dJE/o7UxMMwQEREZQkaGalVefSQlAQ4O8vZTjHDODBERUUH17q1fkImOVs2LYZAxKIYZIiKi/Fq7VrWbaPNm7XU//aQKMTVqGKevYoa7mYiIiKS6eBHw89NdN3gwsGaN/P0UcwwzRERE+kpMBEqW1F1nb6+q5YkgjYLPMhERkS5CAOXL6xdknj0DkpMZZIyIzzQREZE2n32mCiZxcdrrTp1ShR4XF6O0Rf9gmCEiIsrNtm2qyb2LFmmv++YbVYhp1Mg4fVEOnDNDRET0tpgYoFIl3XWBgcCuXfL3QzoxzBAREQFAaipga6tfLc9oXahwNxMREVGTJvoFmXv3eEbrQohhhoiIiq9Zs1TzYk6d0l63Z88/RzRRocPdTEREVPwcPgy0bKm7bsoU4MsvZW+HCoZhhoiIio9HjwB3d911deqoVvkls8AwQ0RERZ+UM1qnpAB2dvL2QwbFOTNERFS09eihX5C5dk01L4ZBxuwwzBARUdG0cqVqcm94uPa6TZtUIaZqVeP0RQbH3UxERFS0REUB/v6664YMAVaskL0dkh/DDBERFQ0JCUCpUrrrSpUCnj9XjdpQkWDS3UxHjhxBUFAQPDw8oFAoEBERkWftsGHDoFAosHDhQqP1R0REZkAIoEwZ/YLMixeqHwaZIsWkYSY5ORl169bFkiVLtNZFRETg1KlT8PDwMFJnRESAYroixw8VMv/5j+qM1k+faq+LjFSFHn0CD5kdk+5m6tChAzp06KC15v79+/j000+xe/dudOrUyUidEVFxl1dwUUxXQIQKI3dDOYSHq45S0mXpUmD4cPn7IZMq1HNmMjMz0b9/f4wdOxa1a9fW6zapqalITU1VX3758qVc7RERkbHduKHfUUdBQcD27fL3Q4VCoQ4zc+bMgZWVFUJCQvS+zaxZszB9+nQZuyIiIqN7/Vr/9V/S0vRfII+KhEK7zszZs2exaNEirFu3DgoJE7UmTpyIhIQE9c/du3dl7JKIiGRXv75+QSYuTjUvhkGm2Cm0Yebo0aN4/PgxvLy8YGVlBSsrK9y+fRtjxoyBj49PnrdTKpUoWbKkxg8REZmhGTNURx2dP6+97sABVYgpV844fVGhU2jja//+/dG2bVuNbYGBgejfvz8GDx5soq6IqLgQoSLXScCc/GsEBw8CrVvrrps+HZg6Vf5+qNAzaZhJSkrCjRs31JdjYmIQFRUFFxcXeHl5wdXVVaPe2toa7u7uqF69urFbJaJiiMHFyB48APRZgsPfHzh3Tv5+yGyYNMxERkaiVatW6sujR48GAAwcOBDr1q0zUVdERGRU6emAtbV+ta9eAba28vZDZsekYaZly5YQQv+/fGJjY+VrhoiIjK9LF2DHDt11168DVarI3w+ZpUI7AZiIiIqwZctUk3t1BZktW1STexlkSItCOwGYiIiKoLNngQYNdNeNGAF8+638/VCRwDBDRETyi48HnJ1117m5AQ8f8kSQJAnDDBERyUcIVYhJSNBdGx8PODnJ3hIVPZwzQ0RE8hg2THVGa11B5vx5VehhkKF8YpghIiLD+uUX1W6iFSu0161YoQox9eoZpS0quribiYiIDOPaNUCfRU3ff191lBKRgTDMEBFRwbx6Bdjb61ebng5YWsrbDxU73M1ERET55+urX5B5+FC1S4lBhmTAMENERNJNnaqaF3Ppkva6Q4dUIaZsWaO0RcUTwwwREelv715ViJkxQ3vd11+rQkyLFsbpi4o1zpkhIiLd7t8HKlTQXde4MXDypPz9EL2FYYaIiPKWlgbY2OhX+/o1oFTK2w9RLribiYiIctehg35B5uZN1S4lBhkyEUkjM0IIHD58GEePHkVsbCxSUlJQpkwZ+Pv7o23btvD09JSrTyIiMpbFi4GQEN11ERFA166yt5NFMT3n+ZpEqDDa41PhpdfIzKtXrzBz5kx4enqiQ4cO+O233xAfHw9LS0vcuHEDoaGhqFixIjp27IiT3FdKRGSezpxRTe7VFWRGjlSNxJg4yGjbTsWLXiMz1apVQ+PGjbF8+XIEBgbC2to6R83t27fx008/oXfv3pg8eTKGDBli8GaJiEgGz58Drq666zw8gHv3eEZrKnQUQgidY3SXLl1CnTp19LrDN2/e4Pbt26hatWqBmzOEly9fwsnJCQkJCShZsqSp2yEiKjwyMwFHR9UKvrq8fAmUKCF/T3nQNgLDXU1Fk5Tvb712M+kbZADAxsam0AQZIiLKQ3CwajVeXUHmr79Uu5RMGGSIdMnXodnx8fE4ffo0Hj9+jMzMTI3rBgwYYJDGiIhIBhs3An376q5bswYYPFj+fogMQK/dTG/bsWMHPvroIyQnJ6NEiRJQvLXvVKFQ4Pnz5wZvsiC4m4mICMDffwM1a+qu69UL2LRJ/n7ygUczFS9Svr8lh5lq1aqhY8eOmDlzJuz1PUuqCTHMEFGxlpICODjoV8szWlMhYvA5M2+7f/8+QkJCzCLIEBEVW0IA1avrF2QeP+YZrcmsSQ4zgYGBiIyMlKMXIiIyhEmTAAsL4No17XVHj6pCTJkyxumLSCaSJwB36tQJY8eOxZUrV+Dr65tjzZkuXboYrDkiIpJg1y7VKQh0mTMHGDdO/n6IjETynBkLi7wHcxQKBTIyMgrclCFxzgwRFXl37wJeXrrrmjVTjcYQmQEp39+SR2ayH4pNREQmwjNaEwHgWbOJiMxTmzb6BZnYWJ7Rmoo8vUZmvvnmGwwdOhS2trb45ptvtNaG6HOmVSIiyp+FC4FRo3TX7dgBdO4seztEhYFec2YqVqyIyMhIuLq6omLFinnfmUKBW7duGbTBguKcGSIqEk6eBN55R3fdmDHA//4nfz9EMjP4nJmYmJhc/01ERDJ79gwoXVp3XcWKwM2bPKM1FUv5OjcTERHJLDNTNc8lPV13bWKi6uzXeeBpAKiokxxmhBD49ddfcfDgwVxPNBkeHm6w5oiIiqX+/YENG3TXXboE1K6ttSS3IJO1nYGGigrJRzONHDkS/fv3R0xMDBwdHeHk5KTxQ0RE+bR+vWo3ka4g8/33qiOUdAQZouJC8sjMhg0bEB4ejo4dO8rRDxFR8XPlin7B5KOP9BuxISpmJIcZJycnVKpUSY5eiIiKl6QkoEQJ3XVWVkBqqup8S0SUg+RPxrRp0zB9+nS8evVKjn6IiIo+IYBKlfQLMk+eqFb6ZZAhypPkT8cHH3yAFy9ewM3NDb6+vqhfv77GDxERaTFunCqY6Frm4vhxVejR57BsLfKa5MvJv1SUSN7NNGjQIJw9exb9+vVD2bJloeCaBkREuv32m34r8s6bB4webdCHZnChok5ymPntt9+we/duNGvWTI5+iKgI4Lomb7l9G/Dx0V3XqhVw4IDs7RAVRZLDjKenJ08LQER54rom/+/NG/1P7vjmDWBtLW8/REWY5Dkz8+bNw7hx4xAbGytDO0RERUDz5voFmTt3VPNiGGSICkTyyEy/fv2QkpKCypUrw97eHtbZPoTPnz83WHNERGZl7lzVBF9dfv8d6NBB/n6IignJYWbhwoUytEFEZMb+/BPQZx7hhAnArFny90NUzEgOMwMHDpSjDyIi8/PkCeDmpruualXg6lWe0ZpIJnrNmUlOTpZ0p1LriajoKBbrmmRmqoKJPkEmKQm4do1BhkhGeoWZKlWqYObMmYiLi8uzRgiBvXv3okOHDvjmm28M1iARmR8RKnL8FBl9+gCWlrrrrlxRTe51cJC/J6JiTq/dTIcOHcLkyZMxffp01KtXDw0aNICHhwdsbW3x4sULXLlyBSdOnIC1tTUmTpyIoUOHyt03EZFxrVsHDB6su+7HH4G+fWVvh4j+oRBC6P0n07179/DLL7/gyJEjiI2NxatXr1C6dGn4+/sjMDAQHTt2hEUhO3/Iy5cv4eTkhISEBK6PQ0TSXbwI+Pnprhs0CFi7VvZ2iIoLKd/fksKMOWKYIaJ8SUwE9Pk/w85ONS+mkP0hR2TupHx/89NHRPQ2IYAKFfQLMs+eASkpDDJEJsZPIBFRllGjVMHk/n3tdadOqUKPi4tx+iIirRhmiIi2b1cdOq1rUdBFi1QhplEjo7RFRPqRvGgeEVGRERMDVKqku659e2D3bvn7IaJ8YZghouInNRWwtdWvlme0Jir08hVm4uPjcfr0aTx+/BiZmZka1w0YMMAgjRERyeKdd4CTJ3XX3bsHlC8vfz9EVGCSw8yOHTvw0UcfITk5GSVKlIDirSW6FQoFwwwRFU6zZgGTJumu27MHaNdO/n6IyGAkTwAeM2YMgoODkZiYiPj4eLx48UL98/z5czl6JCLKvyNHVJN7dQWZyZNVk3sZZIjMjuSRmfv37yMkJAT29vZy9ENEZBiPHgHu7rrratcGLl2Svx8iko3kMBMYGIjIyEhU0ucIACIiY8vIAKz0/K8tORngH2ZEZk9ymOnUqRPGjh2LK1euwNfXF9bZZvl36dLFYM0REUnSsyewZYvuuqtXgWrV5O+HiIxC8rmZtJ1IUqFQICMjo8BNGRLPzURUDKxaBQwZortu0yagVy/5+yGiApPy/S15ZCb7odhERCYTFQX4++uuGzIEWLFC9naIyDS4aB4RmZ+XLwEnJ911Tk7Aixeqo5mIqMjK17mZDh8+jKCgIFSpUgVVq1ZFly5dcPToUUP3RkSkSQjAzU2/IPP8ORAfzyBDVAxIDjMbNmxA27ZtYW9vj5CQEHz66aews7NDmzZt8NNPP8nRIxER8N//qs5o/eSJ9rozZ1Shx9nZOH0RkclJngBcs2ZNDB06FKNGjdLYPn/+fKxcuRLR0dEGbbCgOAGYyMxt3Qq8/77uum+/BUaMkL8fIjIKKd/fkkdmbt26haCgoBzbu3TpgpiYGKl3R0SUu5s3VbuIdAWZTp1UIzEMMkTFluQJwJ6enti/fz+qVKmisX3//v3w9PQ0WGNEVEy9fg3Y2elXm5am/wJ5RFRk5evcTCEhIRg+fDjWr1+PDRs24N///jdGjhyJzz//XNJ9HTlyBEFBQfDw8IBCoUBERITG9dOmTUONGjXg4OAAZ2dntG3bFqdOnZLaMhGZiwYN9AsycXGq0RgGGSJCPsLM8OHD8fPPP+PixYv47LPPMHLkSFy6dAmbNm3CsGHDJN1XcnIy6tatiyVLluR6fbVq1bBkyRJcvHgRx44dg4+PD9q3b48nuiYAEpF5mTFDtUvp7Fntdfv3q0JMuXLG6YuIzILkCcByUSgU2Lp1K7p165ZnTdZkoH379qFNmzZ63S8nABMVYgcPAq1b666bNg0IDZW9HSIqPGRdAdhU3rx5gxUrVsDJyQl169Y1dTtEVBAPHgAeHrrr6tUDzp+XvR0iMm96hRkXFxdcu3YNpUuXhrOzMxRaFqF6/vy5wZoDgJ07d6JPnz5ISUlBuXLlsHfvXpQuXTrP+tTUVKSmpqovv3z50qD9EFEBpKcD2U5Om6eUFP0nAhNRsaZXmFmwYAFKlCih/re2MGNorVq1QlRUFJ4+fYqVK1eiV69eOHXqFNzc3HKtnzVrFqZPn260/ohIT127Atu36667fh3IdrQkEZE2ZjVnBgCqVq2K4OBgTJw4MdfrcxuZ8fT05JwZIlNZvhwYPlx33a+/Aj16yN8PEZkFWefMWFpa4sGDBzlGRp49ewY3NzdkZGRIvUtJhBAaYSU7pVIJpVIpaw9EpIdz54B//Ut33fDhwNKl8vdDREWW5DCT10BOamoqbGxsJN1XUlISbty4ob4cExODqKgouLi4wNXVFV9//TW6dOmCcuXK4dmzZ1i6dCnu3buHDz74QGrbRGQs8fH6nRepdGng8WOeCJKICkzvMPPNN98AUO0OWrVqFRwdHdXXZWRk4MiRI6hRo4akB4+MjESrVq3Ul0ePHg0AGDhwIJYvX46///4b33//PZ4+fQpXV1c0bNgQR48eRe3atSU9DhEZgRCAi4sqzOgSH6/fma+JiPSg95yZihUrAgBu376NChUqwNLSUn2djY0NfHx88OWXX6Jx48bydJpPXGeGyAj+/W/gu+901507B/j7y98PEZk9WebMZJ1EslWrVggPD4ezPsPIRFS0/fIL0KuX7rrvvgOGDpW/HyIqliTPmTl48KAcfRCRObl+HahWTXddt27A1q2yt0NExVu+VgC+d+8etm/fjjt37uDNmzca182fP98gjRFRIfTqFWBvr19tejrw1u5oIiK5SA4z+/fvR5cuXVCxYkVcvXoVderUQWxsLIQQqF+/vhw9ElFh4OcHXLyou+7hQ6BsWfn7ISL6f5LPmj1x4kSMGTMGly5dgq2tLbZs2YK7d++iRYsWPGSaqCgKDVUdPq0ryBw6pDqiiUGGiIxMcpiJjo7GwIEDAQBWVlZ49eoVHB0d8eWXX2LOnDkGb5CITGTfPlWI+fJL7XVffaUKMS1aGKcvIqJsJO9mcnBwUK/A6+HhgZs3b6rXfXn69KlhuyMi44uLA8qX113XqBFw6pT8/RAR6SA5zDRp0gR//vknatWqhU6dOmHMmDG4ePEiwsPD0aRJEzl6JCJjkHJG61evAFtbefshItKT5DAzf/58JCUlAQCmTZuGpKQkbNq0CVWqVMGCBQsM3iARGUHHjsAff+iuu3kTqFRJ/n6IiCSQFGYyMjJw9+5d+Pn5AQDs7e2xlCeIIzJfS5YA//2v7rqtW1VrxhARFUKSJgBbWloiMDAQ8fqce4WICq8zZ1STe3UFmZAQ1eReBhkiKsQk72by9fXFrVu31OdqIiIz8uKF6mSQupQrB9y/zzNaE5FZkHxo9tdff43PP/8cO3fuxIMHD/Dy5UuNHyIqhIQAHB31CzIJCaojmhhkiMhM6H3W7CwWFv/kH8Vb/9kJIaBQKJCRkWG47gyAZ82mYu/jj4E1a3TX/fWXapVfIqJCQJazZmfhiSaJzMTGjUDfvrrrVq8GgoPl74eISCaSw0wLrvJJVLj9/TdQs6buug8+ADZvlr8fIiKZSQ4zR44c0Xp98+bN890MERVASgrg4KBfLc9oTURFiOQw07Jlyxzb3p47U9jmzBAVCzVrqkZkdHn0CHBzk78fIiIjknw004sXLzR+Hj9+jF27dqFhw4bYs2ePHD0SUV6++EJ11JGuIHP0qOqIJgYZIiqCJI/MODk55djWrl07KJVKjBo1CmfPnjVIY0Skxe7dwHvv6a6bPRsYP17+foiITEhymMlLmTJlcPXqVUPdHRHl5t49wNNTd13TpsCxY/L3Q0RUCEgOMxcuXNC4LITAgwcPMHv2bNStW9dgjRHRW9LSABsb/WpfvwaUSnn7ISIqRCSHmXr16kGhUCD7WntNmjTBGn0W5iIiadq2Bfbv110XEwP4+MjeDhFRYSM5zMTExGhctrCwQJkyZWBra2uwpogIwMKFwKhRuut27AA6d5a9HSKiwkpymPH29pajDyLKcuoU0KSJ7rrRo4F58+Tvh4iokNMrzHzzzTd632FISEi+myEq1p49A0qX1l3n7a3apcQTQRIRAdDzRJMVK1bUuPzkyROkpKSgVKlSAID4+HjY29vDzc0Nt27dkqXR/OKJJqnQy8wEbG1Vk3x1SUxUnf2aiKiIk/L9rdeieTExMeqfr7/+GvXq1UN0dDSeP3+O58+fIzo6GvXr18eMGTMM8gsQFRsDBqhOK6AryFy8qFr0jkGGiCgHvUZm3la5cmX8+uuv8Pf319h+9uxZ9OzZM8cEYVPjyAwVShs2AP37665btw4YOFD2doiIChsp39+SJwA/ePAAabn8FZmRkYFHjx5JvTui4uXKFaB2bd11ffsCP/4ofz9EREWA5HMztWnTBkOGDEFkZKR6rZnIyEgMGzYMbdu2NXiDREVCcrJqwq6uIGNlBWRkMMgQEUkgeWRmzZo1GDhwIBo1agRra2sAQHp6OgIDA7Fq1SqDN0ikD8X0nEf2iFBJe1DlIQRQpQqgz8T4J0/0O5qJiIg0SJ4zk+X69euIjo6GEAI1a9ZEtWrVDN2bQXDOTNGXW5DJYtJAM348EBamu+74ceCdd+Tvh4jIjMg6ZyZL1apVUbVq1fzenKjo+v13oFMn3XXz5qkWviMiogIx2FmziYq9O3dUC9rp0rIlcPCg7O0QERUXDDNEBfXmjf5nqU5N1f/s10REpBfJRzMR0VtatNAvyNy5o5oMzCBDRGRwDDNk9vKa5Cvr5N9581SHWh85or3u999VIcbTU75eiIiKuXztZnrx4gVWr16N6OhoKBQK1KhRA8HBwXBxcTF0f0R6MdpRS8ePA02b6q4bNw6YM0f+foiISPrIzOHDh1GxYkV88803ePHiBZ4/f47FixejYsWKOHz4sBw9EpnekyeqkRhdQaZqVdWJIxlkiIiMRvI6M3Xq1EFAQACWLVsGS0tLAKpTGYwYMQJ//vknLl26JEuj+cV1ZqhAMjNVJ4LUR1IS4OAgbz9ERMWEwc+a/babN29izJgx6iADAJaWlhg9ejRu3rwpvVuiwqpvX/2CzJUrqnkxDDJERCYhOczUr18f0dHRObZHR0ejXr16huiJyLTWrVPtUtq4UXvdjz+qQkzNmkZpi4iIcid5AnBISAhGjhyJGzduoEmTJgCAkydP4ttvv8Xs2bNx4cIFda2fn5/hOiWS26VLgK+v7rqBA1WBh4iICgXJc2YsLLQP5igUCgghoFAokJGRUaDmDIFzZkinxERAn/eGra3q7Nc6PgNERFRwsp6bKSYmJt+NERUqQqhOP3D3ru7aZ88ALj1ARFQoSQ4z3vqce4aosBs9GliwQHfdyZNA48by90NERPmmV5jZvn07OnToAGtra2zfvl1rbZcuXQzSGJEsduwA9HmPLloEhITI3082iumKHNuMtiAgEZGZ0mvOjIWFBR4+fAg3Nzetc2YKyzyZt3HODAEAYmOBihV117VrB+zZI3s7ucktyGRhoCGi4sbgc2YyMzNz/TdRoZeaqpq4q483bwBra3n7ISIig5N0WEZaWhpatWqFa9euydUPkeEEBOgXZO7dU00GZpAhIjJLksKMtbU1Ll26BIUi7+FwIpObPVu16N2JE9rrdu9WhZjy5Y3TFxERyULyghkDBgzA6tWr5eiFqGCOHlWFmIkTtdd98YUqxLRvb5y+iIhIVpIPzX7z5g1WrVqFvXv3okGDBnDIdj6a+fPnG6w5Ir08fgyULau7rlYt4PJl+fvJJxEqeDQTEVE+SA4zly5dQv369QGAc2fItDIzgfffB7Zt012bnAzY28vfUwExuBARSSc5zBw8eFCOPoikmT8fGDNGd93ffwPVq8vfDxERmYzkOTPBwcFITEzMsT05ORnBwcEGaYooTwcOqObF6AoyP/+smhfDIENEVORJPtGkpaUlHjx4ADc3N43tT58+hbu7O9LT0w3aYEFx0bwiQt9F7z75BFi5UvZ2iIhIXrKcaPLly5cQQkAIgcTERNi+tX5HRkYGfv/99xwBh6jAXr0C/P2Bq1e11w0YAKxbpxq1ISKiYkXvMFOqVCkoFAooFApUq1Ytx/UKhQLTp083aHNUjAkBDB0KrFqlva5SJeDCBSDbUXVERFR86B1mDh48CCEEWrdujS1btsDFxUV9nY2NDby9veHh4SFLk1TMrFkDfPyx7robN4DKleXvh4iICjW9w0yLFi0AADExMfDy8uIqwGR4p08DjRvrrtu1CwgMlL8fIiIyC5KPZvL29maQIcN69Eg110VXkJk1S7X7iUGGiIjeInmdGSKDSUsDWrYEjh/XXte5MxARAVhaGqMrIiIyM5JHZogMYuJEwMZGe5ApWRJ4/hzYsYNBhoiI8sSRGTKuLVuAnj111128CNSpI38/RERk9vI1MpOeno59+/bhu+++U68GHBcXh6SkJIM2R0XI5cuqeTG6gszmzap5MQwyRESkJ8kjM7dv38Z7772HO3fuIDU1Fe3atUOJEiUQFhaG169fY/ny5XL0SeYqPl61cm98vPa6sWOBsDBjdEREREWM5JGZkSNHokGDBnjx4gXs7OzU27t37479+/cbtDkyY5mZQJcugLOz9iDTpAmQmsogQ0RE+SZ5ZObYsWP4888/YWNjo7Hd29sb9+/fN1hjZMbCwoDx43XXPXgAuLvL3w8RERVpkkdmMjMzkZGRkWP7vXv3UKJECUn3deTIEQQFBcHDwwMKhQIRERHq69LS0jB+/Hj4+vrCwcEBHh4eGDBgAOLi4qS2TMayd69qXoyuIHPihGpeDIMMEREZgOQw065dOyxcuFB9WaFQICkpCaGhoejYsaOk+0pOTkbdunWxZMmSHNelpKTg3LlzmDJlCs6dO4fw8HBcu3YNXbp0kdoyyS0mRhVi2rfXXrdypSrENGlinL6IiKhYUAghhJQbxMXFoVWrVrC0tMT169fRoEEDXL9+HaVLl8aRI0fyfeZshUKBrVu3olu3bnnWnDlzBo0aNcLt27fh5eWl1/1KOYU4SZSSAtStqzpHkjbBwaoTRnLlaCIi0pOU72/Jc2Y8PDwQFRWFjRs34ty5c8jMzMTHH3+Mjz76SGNCsBwSEhKgUChQqlSpPGtSU1ORmpqqvvzy5UtZeyqWhFAFlHXrtNdVqwacPw/Y2xulLSIiKp7ytWienZ0dgoODERwcbOh+8vT69WtMmDABffv21ZrQZs2ahenTpxutr2Jn5Upg6FDddbduqQ7JJiIikpnkMLN9+/ZctysUCtja2qJKlSqoaOAvsbS0NPTp0weZmZlYunSp1tqJEydi9OjR6ssvX76Ep6enQfsplk6cAAICdNft3Qu0bSt/P0RERP9Pcpjp1q0bFAoFsk+1ydqmUCjQrFkzREREwNnZucANpqWloVevXoiJicGBAwd07jdTKpVQKpUFflz6fw8eAB4euuvCwlQL3xERERmZ5KOZ9u7di4YNG2Lv3r1ISEhAQkIC9u7di0aNGmHnzp04cuQInj17hs8//7zAzWUFmevXr2Pfvn1wdXUt8H2Snt68ARo31h1kunUDMjIYZIiIyGQkj8yMHDkSK1asQMBbuxzatGkDW1tbDB06FJcvX8bChQv1mk+TlJSEG28dCRMTE4OoqCi4uLjAw8MDPXv2xLlz57Bz505kZGTg4cOHAAAXF5cci/aRAY0dC/zvf9prXFyAmzcBLZOxiYiIjEFymLl582auu3pKliyJW7duAQCqVq2Kp0+f6ryvyMhItGrVSn05a67LwIEDMW3aNPX8nHr16mnc7uDBg2jZsqXU1kmXzZuB3r11112+DNSqJX8/REREepAcZv71r39h7Nix+OGHH1CmTBkAwJMnTzBu3Dg0bNgQAHD9+nVUqFBB5321bNkyx9ybt0lcAofy6+JFwM9Pd92WLcD778vfDxERkQSS58ysXr0aMTExqFChAqpUqYKqVauiQoUKiI2NxapVqwCodh9NmTLF4M2SgT1/DpQooTvITJyoWluGQYaIiAohySsAA6oRk927d+PatWsQQqBGjRpo164dLCwkZyPZcQXgXGRkqM5o/fvv2uuaNQMOHACsrY3TFxER0f+T8v2drzBjThhmspk1C5g0SXfdw4dA2bLy90NERJQLWU9nAKhOEHn48GHcuXMHb9680bguJCQkP3dJctu1C+jQQXfdqVNAo0by90NERGQgksPM+fPn0bFjR6SkpCA5ORkuLi54+vQp7O3t4ebmxjBT2Ny8CVSportuzRpg8GD5+yEiIjIwyZNcRo0ahaCgIDx//hx2dnY4efIkbt++jX/961/4n661Sch4kpJU50bSFWSGDgUyMxlkiIjIbEkOM1FRURgzZgwsLS1haWmJ1NRUeHp6IiwsDJP0mYtB8hICGDBAdZRSbGzedTVrAikpUHisgOJLCyimK9Q/RERE5kRymLG2toZCofrCK1u2LO7cuQMAcHJyUv+bTGT5csDCAli/XntdbCxw5QoUYfa5Xs1AQ0RE5kTynBl/f39ERkaiWrVqaNWqFaZOnYqnT59i/fr18PX1laNH0uXPP1WHUety4ADw1orLRERERYHkkZmZM2eiXLlyAIAZM2bA1dUVw4cPx+PHj7FixQqDN0haxMUBCoXuIDNvnmr3E4MMEREVQZJGZoQQKFOmDGrXrg0AKFOmDH7XtfAaGV5qKhAQAJw7p72uZ09g0ybVriciIqIiStK3nBACVatWxb179+Tqh3QZNQqwtdUeZNzcgPh44JdfGGSIiKjIk/RNZ2FhgapVq+LZs2dy9UN52bhRtUtp4ULtdVeuAI8eAU5OOu9ShOa++HNe24mIiAojyROAw8LCMHbsWCxbtgx16tSRoyd6219/AfXq6a6LiAC6dpV89wwuRERk7iSfm8nZ2RkpKSlIT0+HjY0N7OzsNK5//vy5QRssKLM9N9OzZ4CnJ/Dqlfa6L74AvvrKOD0REREZiaznZlqoazcHFUxGBtCxI7Bnj/a6li1VNTyjNRERFXOSw8zAgQPl6IMAYMYMYOpU7TWWlsCDB0CZMsbpiYiIqJDL16EuN2/exOTJk/Hhhx/i8ePHAIBdu3bh8uXLBm2u2Pj9d9XkXl1BJjISSE9nkCEiInqL5DBz+PBh+Pr64tSpUwgPD0dSUhIA4MKFCwgNDTV4g0Xa9euqENOpk/a6H35QLXr3r38Zpy8iIiIzIjnMTJgwAV999RX27t0LGxsb9fZWrVrhxIkTBm2uyEpMVE3urVZNe92IEaozWvfvb5y+iIiIzJDkMHPx4kV07949x/YyZcpw/RldhAD69gVKlgS0LTxYpw6QkgJ8+61q5IaIiIjyJDnMlCpVCg8ePMix/fz58yhfvrxBmiqSlixRrca7caP2ujt3gIsXgWyHvBMREVHuJIeZvn37Yvz48Xj48CEUCgUyMzPx559/4vPPP8eAAQPk6NG8HT2qGl3573+11x08qBq58fQ0Tl9ERERFhOQw8/XXX8PLywvly5dHUlISatWqhebNmyMgIACTJ0+Wo0fzdO+eKsQ0b669btEiVYhp2dIobRERERU1klcAznLz5k2cP38emZmZ8Pf3R9WqVQ3dm0EYfQXg16+Bd94BoqK01/XuDfz0E08ESURElAtZVwA+fPgwWrRogcqVK6Ny5cr5brLIEQIICVHNjdHGwwOIjlZNAiYiIqICkzws0K5dO3h5eWHChAm4dOmSHD2Znw0bVCMsuoLM1avA/fsMMkRERAYkOczExcVh3LhxOHr0KPz8/ODn54ewsDDc03aocVF1/rxqXoyudWB27FCN3OhaV4aIiIgkkxxmSpcujU8//RR//vknbt68id69e+OHH36Aj48PWrduLUePhZOfH1C/vvaa0FBViOnc2Tg9ERERFUOS58y8rWLFipgwYQLq1q2LKVOm4PDhw4bqq3D74gvVWjB5adsW+OMPwKpATy8RERHpId+H0vz5558YMWIEypUrh759+6J27drYuXOnIXsrvLZuzX27jQ3w5Amwdy+DDBERkZFI/sadNGkSNm7ciLi4OLRt2xYLFy5Et27dYG9vL0d/hdPmzYCvr+a2c+cAf3/T9ENERFSMSQ4zhw4dwueff47evXujdOnSGtdFRUWhXr16huqt8KpTR7Uo3vTpwIABQLNmpu6IiIio2Mr3onlZEhIS8OOPP2LVqlX466+/kJGRYajeDMLoi+YRERFRgUn5/s73nJkDBw6gX79+KFeuHBYvXoyOHTsiMjIyv3dHRERElC+SdjPdu3cP69atw5o1a5CcnIxevXohLS0NW7ZsQa1ateTqkYiIiChPeo/MdOzYEbVq1cKVK1ewePFixMXFYfHixXL2RkRERKST3iMze/bsQUhICIYPH15oTypJRERExY/eIzNHjx5FYmIiGjRogMaNG2PJkiV48uSJnL0RERER6aR3mHnnnXewcuVKPHjwAMOGDcPPP/+M8uXLIzMzE3v37kViYqKcfRIRERHlqkCHZl+9ehWrV6/G+vXrER8fj3bt2mH79u2G7K/AeGg2ERGR+THKodkAUL16dfUZszdu3FiQuyIiIiLKlwIvmlfYcWSGiIjI/BhtZIaIiIjI1BhmiIiIyKwxzBAREZFZY5ghIiIis8YwQ0RERGaNYYaIiIjMGsMMERERmTWGGSIiIjJrDDNERERk1hhmiIiIyKwxzBAREZFZY5ghIiIis8YwQ0RERGaNYYaIiIjMGsMMERERmTWGGSIiIjJrDDNERERk1hhmiIiIyKwxzBAREZFZY5ghIiIis8YwQ0RERGaNYYaIiIjMGsMMERERmTWGGSIiIjJrDDNERERk1hhmiIiIyKyZNMwcOXIEQUFB8PDwgEKhQEREhMb14eHhCAwMROnSpaFQKBAVFWWSPomIiKjwMmmYSU5ORt26dbFkyZI8r2/atClmz55t5M6IiIjIXFiZ8sE7dOiADh065Hl9//79AQCxsbFG6oiIiIjMDefMEBERkVkz6ciMHFJTU5Gamqq+/PLlSxN2Q0RERHIrciMzs2bNgpOTk/rH09PT1C0RERGRjIpcmJk4cSISEhLUP3fv3jV1S0RERCSjIrebSalUQqlUmroNIiIiMhKThpmkpCTcuHFDfTkmJgZRUVFwcXGBl5cXnj9/jjt37iAuLg4AcPXqVQCAu7s73N3dTdIzERERFS4m3c0UGRkJf39/+Pv7AwBGjx4Nf39/TJ06FQCwfft2+Pv7o1OnTgCAPn36wN/fH8uXLzdZz0RERFS4KIQQwtRNyOnly5dwcnJCQkICSpYsaep2iIiISA9Svr+L3ARgIiIiKl4YZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1hhkiIiIyawwzREREZNYYZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1hhkiIiIyawwzREREZNYYZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1hhkiIiIyawwzREREZNYYZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1K1M3YK4U0xU5tolQYYJOiIiIijeOzORDbkFG23YiIiKSD8MMERERmTWGGSIiIjJrDDNERERk1hhmiIiIyKwxzORDXkct8WgmIiIi4+Oh2fnE4EJERFQ4cGSGiIiIzBrDDBEREZk1hhkiIiIyawwzREREZNYYZoiIiMisMcwQERGRWWOYISIiIrPGMENERERmjWGGiIiIzBrDDBEREZk1hhkiIiIya0X+3ExCqM6h9PLlSxN3QkRERPrK+t7O+h7XpsiHmcTERACAp6eniTshIiIiqRITE+Hk5KS1RiH0iTxmLDMzE3FxcShRogQUCoVB7/vly5fw9PTE3bt3UbJkSYPeN0nH16Nw4etRuPD1KFz4eugmhEBiYiI8PDxgYaF9VkyRH5mxsLBAhQoVZH2MkiVL8s1YiPD1KFz4ehQufD0KF74e2ukakcnCCcBERERk1hhmiIiIyKwxzBSAUqlEaGgolEqlqVsh8PUobPh6FC58PQoXvh6GVeQnABMREVHRxpEZIiIiMmsMM0RERGTWGGaIiIjIrDHMEBERkVljmMmH+/fvo1+/fnB1dYW9vT3q1auHs2fPmrqtYik9PR2TJ09GxYoVYWdnh0qVKuHLL79EZmamqVsrNo4cOYKgoCB4eHhAoVAgIiJC43ohBKZNmwYPDw/Y2dmhZcuWuHz5smmaLQa0vR5paWkYP348fH194eDgAA8PDwwYMABxcXGma7iI0/X5eNuwYcOgUCiwcOFCo/VXVDDMSPTixQs0bdoU1tbW+OOPP3DlyhXMmzcPpUqVMnVrxdKcOXOwfPlyLFmyBNHR0QgLC8PcuXOxePFiU7dWbCQnJ6Nu3bpYsmRJrteHhYVh/vz5WLJkCc6cOQN3d3e0a9dOfd40Mixtr0dKSgrOnTuHKVOm4Ny5cwgPD8e1a9fQpUsXE3RaPOj6fGSJiIjAqVOn4OHhYaTOihhBkowfP140a9bM1G3Q/+vUqZMIDg7W2Pb++++Lfv36maij4g2A2Lp1q/pyZmamcHd3F7Nnz1Zve/36tXBychLLly83QYfFS/bXIzenT58WAMTt27eN01Qxltfrce/ePVG+fHlx6dIl4e3tLRYsWGD03swdR2Yk2r59Oxo0aIAPPvgAbm5u8Pf3x8qVK03dVrHVrFkz7N+/H9euXQMA/PXXXzh27Bg6duxo4s4IAGJiYvDw4UO0b99evU2pVKJFixY4fvy4CTujLAkJCVAoFBxdNpHMzEz0798fY8eORe3atU3djtkq8ieaNLRbt25h2bJlGD16NCZNmoTTp08jJCQESqUSAwYMMHV7xc748eORkJCAGjVqwNLSEhkZGfj666/x4Ycfmro1AvDw4UMAQNmyZTW2ly1bFrdv3zZFS/SW169fY8KECejbty9Pdmgic+bMgZWVFUJCQkzdilljmJEoMzMTDRo0wMyZMwEA/v7+uHz5MpYtW8YwYwKbNm3Chg0b8NNPP6F27dqIiorCZ599Bg8PDwwcONDU7dH/UygUGpeFEDm2kXGlpaWhT58+yMzMxNKlS03dTrF09uxZLFq0COfOnePnoYC4m0micuXKoVatWhrbatasiTt37pioo+Jt7NixmDBhAvr06QNfX1/0798fo0aNwqxZs0zdGgFwd3cH8M8ITZbHjx/nGK0h40lLS0OvXr0QExODvXv3clTGRI4ePYrHjx/Dy8sLVlZWsLKywu3btzFmzBj4+PiYuj2zwjAjUdOmTXH16lWNbdeuXYO3t7eJOireUlJSYGGh+Ta2tLTkodmFRMWKFeHu7o69e/eqt7158waHDx9GQECACTsrvrKCzPXr17Fv3z64urqauqViq3///rhw4QKioqLUPx4eHhg7dix2795t6vbMCnczSTRq1CgEBARg5syZ6NWrF06fPo0VK1ZgxYoVpm6tWAoKCsLXX38NLy8v1K5dG+fPn8f8+fMRHBxs6taKjaSkJNy4cUN9OSYmBlFRUXBxcYGXlxc+++wzzJw5E1WrVkXVqlUxc+ZM2Nvbo2/fvibsuujS9np4eHigZ8+eOHfuHHbu3ImMjAz1qJmLiwtsbGxM1XaRpevzkT1MWltbw93dHdWrVzd2q+bN1IdTmaMdO3aIOnXqCKVSKWrUqCFWrFhh6paKrZcvX4qRI0cKLy8vYWtrKypVqiS++OILkZqaaurWio2DBw8KADl+Bg4cKIRQHZ4dGhoq3N3dhVKpFM2bNxcXL140bdNFmLbXIyYmJtfrAIiDBw+auvUiSdfnIzsemp0/CiGEMGp6IiIiIjIgzpkhIiIis8YwQ0RERGaNYYaIiIjMGsMMERERmTWGGSIiIjJrDDNERERk1hhmiIiIyKwxzBBRkXLo0CEoFArEx8ebuhUiMhKGGSLKl8ePH2PYsGHw8vKCUqmEu7s7AgMDceLECXWNQqFARESEQR4vNjYWCoUCUVFRBrk/Iio6eG4mIsqXHj16IC0tDd9//z0qVaqER48eYf/+/Xj+/LnBH+vNmzcGv09DE0IgIyMDVlb8b5XI2DgyQ0SSxcfH49ixY5gzZw5atWoFb29vNGrUCBMnTkSnTp0AAD4+PgCA7t27Q6FQqC/fvHkTXbt2RdmyZeHo6IiGDRti3759Gvfv4+ODr776CoMGDYKTkxOGDBmCihUrAgD8/f2hUCjQsmVLrT2ePXsWDRo0gL29PQICAnKc7X7ZsmWoXLkybGxsUL16daxfv159XW6jQPHx8VAoFDh06BCAf3Zn7d69Gw0aNIBSqcTRo0clPpNEZAgMM0QkmaOjIxwdHREREYHU1NRca86cOQMAWLt2LR48eKC+nJSUhI4dO2Lfvn04f/48AgMDERQUhDt37mjcfu7cuahTpw7Onj2LKVOm4PTp0wCAffv24cGDBwgPD9fa4xdffIF58+YhMjISVlZWGmdS37p1K0aOHIkxY8bg0qVLGDZsGAYPHoyDBw9Kfi7GjRuHWbNmITo6Gn5+fpJvT0QGYOITXRKRmfr111+Fs7OzsLW1FQEBAWLixInir7/+0qgBILZu3arzvmrVqiUWL16svuzt7S26deumUZN1xufz589rva+ssxTv27dPve23334TAMSrV6+EEEIEBASIIUOGaNzugw8+EB07dszzsV68eKFxdumsx4mIiND5+xGRvDgyQ0T50qNHD8TFxWH79u0IDAzEoUOHUL9+faxbt07r7ZKTkzFu3DjUqlULpUqVgqOjI/7+++8cIzMNGjQoUH9vj5KUK1cOgGrSMgBER0ejadOmGvVNmzZFdHS05McpaJ9EVHAMM0SUb7a2tmjXrh2mTp2K48ePY9CgQQgNDdV6m7Fjx2LLli34+uuvcfToUURFRcHX1zfHJF8HB4cC9WZtba3+t0KhAABkZmbm2JZFCKHeZmFhod6WJS0tLdfHKWifRFRwDDNEZDC1atVCcnKy+rK1tTUyMjI0ao4ePYpBgwahe/fu8PX1hbu7O2JjY3Xet42NDQDkuL/8qFmzJo4dO6ax7fjx46hZsyYAoEyZMgCABw8eqK/nIeFEhRePISQiyZ49e4YPPvgAwcHB8PPzQ4kSJRAZGYmwsDB07dpVXefj44P9+/ejadOmUCqVcHZ2RpUqVRAeHo6goCAoFApMmTJFY8QkL25ubrCzs8OuXbtQoUIF2NrawsnJKV/9jx07Fr169UL9+vXRpk0b7NixA+Hh4eqjquzs7NCkSRPMnj0bPj4+ePr0KSZPnpyvxyIi+XFkhogkc3R0ROPGjbFgwQI0b94cderUwZQpUzBkyBAsWbJEXTdv3jzs3bsXnp6e8Pf3BwAsWLAAzs7OCAgIQFBQEAIDA1G/fn2dj2llZYVvvvkG3333HTw8PDRCk1TdunXDokWLMHfuXNSuXRvfffcd1q5dq3G495o1a5CWloYGDRpg5MiR+Oqrr/L9eEQkL4V4e6cwERERkZnhyAwRERGZNYYZIiIiMmsMM0RERGTWGGaIiIjIrDHMEBERkVljmCEiIiKzxjBDREREZo1hhoiIiMwawwwRERGZNYYZIiIiMmsMM0RERGTWGGaIiIjIrP0fg94YRDneM6sAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the training set results.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xb_train, yb_train, color='green', s = 15)\n",
    "plot_test.plot(Xb_train, yb_predicted_train, color='red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Train set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c76831f7",
   "metadata": {},
   "source": [
    "#### df_sub_c (>15pm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b104bd27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape the variables into NumPy arrays and put them into separate objects\n",
    "Xc = df_sub_c['start_hour'].values.reshape(-1,1)\n",
    "yc = df_sub_c['avg_trip_duration_each_hour'].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "b033fbcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[18],\n",
       "       [18],\n",
       "       [19],\n",
       "       ...,\n",
       "       [17],\n",
       "       [18],\n",
       "       [21]])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "46eb7fec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14.1],\n",
       "       [14.1],\n",
       "       [13.2],\n",
       "       ...,\n",
       "       [14. ],\n",
       "       [14.1],\n",
       "       [12.9]])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "9d011fd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into a training set and a test set\n",
    "\n",
    "Xc_train, Xc_test, yc_train, yc_test = train_test_split(Xc, yc, test_size = 0.3, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "6700dd15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the regression object onto the training set\n",
    "\n",
    "regression.fit(Xc_train, yc_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "f2689c53",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict the values of y using X\n",
    "\n",
    "yc_predicted = regression.predict(Xc_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "1e0b96dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a plot that shows the regression line from the model on the test set.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xc_test, yc_test, color = 'gray', s = 15)\n",
    "plot_test.plot(Xc_test, yc_predicted, color = 'red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Test set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "2069212f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create objects that contain the model summary statistics.\n",
    "\n",
    "rmse_c = mean_squared_error(yc_test, yc_predicted) # This is the mean squared error\n",
    "r2_c = r2_score(yc_test, yc_predicted) # This is the R2 score. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "90ab78a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[-0.31204471]]\n",
      "Mean squared error:  0.04744469254299047\n",
      "R2 score:  0.8856593604873697\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary statistics. This is where you evaluate the performance of the model.\n",
    "\n",
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_c)\n",
    "print('R2 score: ', r2_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "786a174d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13.25605425],\n",
       "       [12.31992012],\n",
       "       [13.25605425],\n",
       "       ...,\n",
       "       [13.88014367],\n",
       "       [13.88014367],\n",
       "       [13.25605425]])"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yc_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "64a7b168",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13.3</td>\n",
       "      <td>13.256054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12.6</td>\n",
       "      <td>12.319920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.3</td>\n",
       "      <td>13.256054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12.7</td>\n",
       "      <td>12.631965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12.7</td>\n",
       "      <td>12.631965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>12.6</td>\n",
       "      <td>12.319920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14.7</td>\n",
       "      <td>14.504233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14.7</td>\n",
       "      <td>14.504233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.7</td>\n",
       "      <td>14.504233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.2</td>\n",
       "      <td>13.568099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>13.2</td>\n",
       "      <td>13.568099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>14.7</td>\n",
       "      <td>14.504233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>14.1</td>\n",
       "      <td>13.880144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14.0</td>\n",
       "      <td>14.192188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>12.7</td>\n",
       "      <td>12.631965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>13.3</td>\n",
       "      <td>13.256054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>13.3</td>\n",
       "      <td>13.256054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>13.2</td>\n",
       "      <td>13.568099</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Actual  Predicted\n",
       "0     13.3  13.256054\n",
       "1     12.6  12.319920\n",
       "2     13.3  13.256054\n",
       "3     14.1  13.880144\n",
       "4     12.7  12.631965\n",
       "5     12.7  12.631965\n",
       "6     14.0  14.192188\n",
       "7     12.6  12.319920\n",
       "8     14.0  14.192188\n",
       "9     14.7  14.504233\n",
       "10    14.0  14.192188\n",
       "11    14.7  14.504233\n",
       "12    14.1  13.880144\n",
       "13    14.1  13.880144\n",
       "14    14.0  14.192188\n",
       "15    14.7  14.504233\n",
       "16    13.2  13.568099\n",
       "17    14.1  13.880144\n",
       "18    14.1  13.880144\n",
       "19    13.2  13.568099\n",
       "20    14.0  14.192188\n",
       "21    14.0  14.192188\n",
       "22    14.7  14.504233\n",
       "23    14.1  13.880144\n",
       "24    14.0  14.192188\n",
       "25    14.0  14.192188\n",
       "26    12.7  12.631965\n",
       "27    13.3  13.256054\n",
       "28    13.3  13.256054\n",
       "29    13.2  13.568099"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe comparing the actual and predicted values of y\n",
    "\n",
    "df_c_ap = pd.DataFrame({'Actual': yc_test.flatten(), 'Predicted': yc_predicted.flatten()})\n",
    "df_c_ap.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "45b073aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare how the regression fits the training set\n",
    "# Predict\n",
    "\n",
    "yc_predicted_train = regression.predict(Xc_train) # This is predicting X_train!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "997a5a9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "rmse_c = mean_squared_error(yc_train, yc_predicted_train)\n",
    "r2_c = r2_score(yc_train, yc_predicted_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "411d0b0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope: [[-0.31204471]]\n",
      "Mean squared error:  0.047943875058626295\n",
      "R2 score:  0.8852128755361695\n"
     ]
    }
   ],
   "source": [
    "print('Slope:' ,regression.coef_)\n",
    "print('Mean squared error: ', rmse_c)\n",
    "print('R2 score: ', r2_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "d35f5c0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the training set results.\n",
    "\n",
    "plot_test = plt\n",
    "plot_test.scatter(Xc_train, yc_train, color='green', s = 15)\n",
    "plot_test.plot(Xc_train, yc_predicted_train, color='red', linewidth =3)\n",
    "plot_test.title('Start hour vs Average trip duration in minutes (Train set)')\n",
    "plot_test.xlabel('Start hour')\n",
    "plot_test.ylabel('Average trip duration (min)')\n",
    "plot_test.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1873061",
   "metadata": {},
   "source": [
    "#### Conclusion:\n",
    "This actually wraps up my analysis about my hypothesis: The closer to rush hour, the higher the average trip duration.\n",
    "\n",
    "From the cluster analysis I came to the conclusion that actually riders during peak hours have a higher average ride duration compared to other normal hours. And after dividing the time frame into 3 categories and repeating the regression, I was able to draw the conclusion that the model was actually a good fit.\n",
    "\n",
    "Of all 3 time frames\n",
    "- They produce small Mean Square Errors (MSE) on testing and training\n",
    "- They produce values close to 1 for the R2 score\n",
    "- Actual and predicted values appear to be good\n",
    "\n",
    "So it is true that the two have a relationship, it's just not linear and by separating them I can see the relationship more clearly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62690366",
   "metadata": {},
   "source": [
    "### Additional Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "410e70f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x31ad04c50>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 643.625x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(\n",
    "    data = df, x = 'hours_category',  y = 'avg_trip_duration_each_hour', hue = 'peak_hours', order = ['0am - 5am', '6am - 15pm', '16pm - 23pm']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "397632d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x31acc7990>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1156.38x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(\n",
    "    data = df, x = 'start_hour',  y = 'avg_trip_duration_each_hour', col = 'peak_hours', hue = 'subscriber', aspect = 1, s = 50\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "01f69c8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/nataliawijaya/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x31b183210>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1628.99x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "sns.catplot(\n",
    "    data = df, x = 'start_hour',  y = 'avg_trip_duration_each_hour', hue = 'gender_category', col = 'hours_category' , aspect = 1, s = 50\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138bdeef",
   "metadata": {},
   "source": [
    "### Exporting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "78a858cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_time</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>...</th>\n",
       "      <th>start_day</th>\n",
       "      <th>end_year</th>\n",
       "      <th>end_month</th>\n",
       "      <th>end_week</th>\n",
       "      <th>end_day</th>\n",
       "      <th>end_hour</th>\n",
       "      <th>days_category</th>\n",
       "      <th>peak_hours</th>\n",
       "      <th>avg_trip_duration_each_hour</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16013</td>\n",
       "      <td>Mon</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-09 18:18:55</td>\n",
       "      <td>523</td>\n",
       "      <td>W 38 St &amp; 8 Ave</td>\n",
       "      <td>40.754666</td>\n",
       "      <td>-73.991382</td>\n",
       "      <td>2013-09-09 18:35:28</td>\n",
       "      <td>334</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15230</td>\n",
       "      <td>Thu</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-09-12 18:38:53</td>\n",
       "      <td>257</td>\n",
       "      <td>Lispenard St &amp; Broadway</td>\n",
       "      <td>40.719392</td>\n",
       "      <td>-74.002472</td>\n",
       "      <td>2013-09-12 18:48:34</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>14.1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17942</td>\n",
       "      <td>Wed</td>\n",
       "      <td>19</td>\n",
       "      <td>2013-09-18 19:44:04</td>\n",
       "      <td>479</td>\n",
       "      <td>9 Ave &amp; W 45 St</td>\n",
       "      <td>40.760193</td>\n",
       "      <td>-73.991255</td>\n",
       "      <td>2013-09-18 19:50:05</td>\n",
       "      <td>513</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Peak hours</td>\n",
       "      <td>13.2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19683</td>\n",
       "      <td>Sat</td>\n",
       "      <td>11</td>\n",
       "      <td>2013-09-28 11:54:37</td>\n",
       "      <td>527</td>\n",
       "      <td>E 33 St &amp; 1 Ave</td>\n",
       "      <td>40.743156</td>\n",
       "      <td>-73.974347</td>\n",
       "      <td>2013-09-28 12:03:58</td>\n",
       "      <td>441</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>28</td>\n",
       "      <td>12</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14581</td>\n",
       "      <td>Fri</td>\n",
       "      <td>22</td>\n",
       "      <td>2013-09-27 22:01:01</td>\n",
       "      <td>293</td>\n",
       "      <td>Lafayette St &amp; E 8 St</td>\n",
       "      <td>40.730287</td>\n",
       "      <td>-73.990765</td>\n",
       "      <td>2013-09-27 22:08:08</td>\n",
       "      <td>432</td>\n",
       "      <td>...</td>\n",
       "      <td>27</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>39</td>\n",
       "      <td>27</td>\n",
       "      <td>22</td>\n",
       "      <td>Weekdays</td>\n",
       "      <td>Normal hours</td>\n",
       "      <td>12.7</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   bike_id weekday  start_hour           start_time  start_station_id  \\\n",
       "0    16013     Mon          18  2013-09-09 18:18:55               523   \n",
       "1    15230     Thu          18  2013-09-12 18:38:53               257   \n",
       "2    17942     Wed          19  2013-09-18 19:44:04               479   \n",
       "3    19683     Sat          11  2013-09-28 11:54:37               527   \n",
       "5    14581     Fri          22  2013-09-27 22:01:01               293   \n",
       "\n",
       "        start_station_name  start_station_latitude  start_station_longitude  \\\n",
       "0          W 38 St & 8 Ave               40.754666               -73.991382   \n",
       "1  Lispenard St & Broadway               40.719392               -74.002472   \n",
       "2          9 Ave & W 45 St               40.760193               -73.991255   \n",
       "3          E 33 St & 1 Ave               40.743156               -73.974347   \n",
       "5    Lafayette St & E 8 St               40.730287               -73.990765   \n",
       "\n",
       "              end_time  end_station_id  ... start_day  end_year  end_month  \\\n",
       "0  2013-09-09 18:35:28             334  ...         9      2013          9   \n",
       "1  2013-09-12 18:48:34             236  ...        12      2013          9   \n",
       "2  2013-09-18 19:50:05             513  ...        18      2013          9   \n",
       "3  2013-09-28 12:03:58             441  ...        28      2013          9   \n",
       "5  2013-09-27 22:08:08             432  ...        27      2013          9   \n",
       "\n",
       "   end_week end_day  end_hour  days_category    peak_hours  \\\n",
       "0        37       9        18       Weekdays    Peak hours   \n",
       "1        37      12        18       Weekdays    Peak hours   \n",
       "2        38      18        19       Weekdays    Peak hours   \n",
       "3        39      28        12        Weekend  Normal hours   \n",
       "5        39      27        22       Weekdays  Normal hours   \n",
       "\n",
       "   avg_trip_duration_each_hour  day_of_week  \n",
       "0                         14.1            2  \n",
       "1                         14.1            5  \n",
       "2                         13.2            4  \n",
       "3                         14.0            7  \n",
       "5                         12.7            6  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "3b0ec4c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fri</td>\n",
       "      <td>6589</td>\n",
       "      <td>12.227804</td>\n",
       "      <td>1975.500379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mon</td>\n",
       "      <td>5124</td>\n",
       "      <td>12.256635</td>\n",
       "      <td>1975.482045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sat</td>\n",
       "      <td>4963</td>\n",
       "      <td>12.904292</td>\n",
       "      <td>1976.978037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sun</td>\n",
       "      <td>4337</td>\n",
       "      <td>13.192991</td>\n",
       "      <td>1976.813235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Thu</td>\n",
       "      <td>6205</td>\n",
       "      <td>12.014504</td>\n",
       "      <td>1975.175665</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  day_of_week  ride_count  avg_duration      avg_age\n",
       "0         Fri        6589     12.227804  1975.500379\n",
       "1         Mon        5124     12.256635  1975.482045\n",
       "2         Sat        4963     12.904292  1976.978037\n",
       "3         Sun        4337     13.192991  1976.813235\n",
       "4         Thu        6205     12.014504  1975.175665"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "c924e5dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_hour</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "      <th>clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>391</td>\n",
       "      <td>11.933504</td>\n",
       "      <td>1979.363171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>244</td>\n",
       "      <td>11.135246</td>\n",
       "      <td>1979.225410</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>10.615942</td>\n",
       "      <td>1978.427536</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>87</td>\n",
       "      <td>10.954023</td>\n",
       "      <td>1981.482759</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>1974.485714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   start_hour  ride_count  avg_duration      avg_age  clusters\n",
       "0           0         391     11.933504  1979.363171         0\n",
       "1           1         244     11.135246  1979.225410         0\n",
       "2           2         138     10.615942  1978.427536         0\n",
       "3           3          87     10.954023  1981.482759         0\n",
       "4           4          70     10.500000  1974.485714         0"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "4e925e02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting df_clean as “citibike_cleaned_age.csv” in “Prepared Data” folder\n",
    "df_clean.to_csv(os.path.join(path, 'Prepared Data', 'citibike_cleaned_age.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "58d6017f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting df_result as “citibike_result_day.csv” in “Prepared Data” folder\n",
    "df_result.to_csv(os.path.join(path, 'Prepared Data', 'citibike_result_day.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "f31a427c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting df_result as “citibike_result_hour.csv” in “Prepared Data” folder\n",
    "df_result1.to_csv(os.path.join(path, 'Prepared Data', 'citibike_result_hour.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "ca417f2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Fri</td>\n",
       "      <td>6589</td>\n",
       "      <td>12.227804</td>\n",
       "      <td>1975.500379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Mon</td>\n",
       "      <td>5124</td>\n",
       "      <td>12.256635</td>\n",
       "      <td>1975.482045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Sat</td>\n",
       "      <td>4963</td>\n",
       "      <td>12.904292</td>\n",
       "      <td>1976.978037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Sun</td>\n",
       "      <td>4337</td>\n",
       "      <td>13.192991</td>\n",
       "      <td>1976.813235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Thu</td>\n",
       "      <td>6205</td>\n",
       "      <td>12.014504</td>\n",
       "      <td>1975.175665</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 day_of_week  ride_count  avg_duration      avg_age\n",
       "0           0         Fri        6589     12.227804  1975.500379\n",
       "1           1         Mon        5124     12.256635  1975.482045\n",
       "2           2         Sat        4963     12.904292  1976.978037\n",
       "3           3         Sun        4337     13.192991  1976.813235\n",
       "4           4         Thu        6205     12.014504  1975.175665"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking\n",
    "df = pd.read_csv(os.path.join(path, 'Prepared Data', 'citibike_result_day.csv'), index_col = False)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "661beb15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>ride_count</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>avg_age</th>\n",
       "      <th>clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>391</td>\n",
       "      <td>11.933504</td>\n",
       "      <td>1979.363171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>244</td>\n",
       "      <td>11.135246</td>\n",
       "      <td>1979.225410</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>10.615942</td>\n",
       "      <td>1978.427536</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>87</td>\n",
       "      <td>10.954023</td>\n",
       "      <td>1981.482759</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>1974.485714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  start_hour  ride_count  avg_duration      avg_age  clusters\n",
       "0           0           0         391     11.933504  1979.363171         0\n",
       "1           1           1         244     11.135246  1979.225410         0\n",
       "2           2           2         138     10.615942  1978.427536         0\n",
       "3           3           3          87     10.954023  1981.482759         0\n",
       "4           4           4          70     10.500000  1974.485714         0"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking\n",
    "df1 = pd.read_csv(os.path.join(path, 'Prepared Data', 'citibike_result_hour.csv'), index_col = False)\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3811e476",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
